[["index.html", "R for Environmental Chemists Howdy Authors", " R for Environmental Chemists David Hall, Steven Kutarna, Kristen Yeh, Hui Peng and Jessica Deon 2021-06-04 Howdy Howdy, This website is more-or-less the living results of a collaborative project between the four of us. Our ultimate goal is not to be an exhaustive resource for all environmental chemist. Rather, were focused on developing broadly applicable data science course content (tutorials and recipes) based in R for undergraduate environmental chemistry courses. Note that none of this has been reviewed yet and is not implemented in any capacity in any curriculum. Authors If you have any questions/comments/suggestions/concerns please email: Dave at davidross.hall@mail.utoronto.ca Steven at steven.kutarna@mail.utoronto.ca Dr. Deon at jessica.deon@utoronto.ca "],["introduction.html", "Chapter 1 Introduction 1.1 Prerequisite software 1.2 Where to get help", " Chapter 1 Introduction What youll learn (and wont learn) learn = basic understanding of R wont learn = L33T hax0r Skillz How book is organized code is covered in chunks or monospaced (like this) Prerequisite software getting help 1.1 Prerequisite software In order to use this book you will first need to download and install R on your computer. The latest build as of March 2021 is v4.0.5. Download the appropriate version of R for your Operating System here. We recommend using the default settings for installation (i.e. just keep clicking Next). Note that you will not need shortcuts for launching R, as you will always be using Rstudio to run provided code. Once R is installed on your computer, you will need to download and install RStudio. Download the appropriate version of RStudio for your Operating System here Again, just use the default installation settings. 1.2 Where to get help While its often tempting to contact your TA/Prof at the sign of first trouble, its often better to try and resolve your issues on your own, especially if theyre related to technical issues in R. Given the popularity of R, if youve run into an issue, someone else has and theyve complained about it and someone else has solved it! An oft unappreciated aspect of coding/data science is knowing how to get help, how to search for it, and how to translate someones solutions to your unique situation. Places to get help include: Stack overflow Using built-in documentation (?help) reference book such as the invaluable (R for Data Science)[https://r4ds.had.co.nz/index.html], which inspired this entire project. All else fails,holler at your TA/profs. "],["running-r-code.html", "Chapter 2 Running R Code", " Chapter 2 Running R Code Where to run code in RStudio (script vs. console) Basic coding building blocks Variable assignment (howdy &lt;- Howdy world) Importing packages Calling functions R Studio basics Environment windows to inspect workspace data/variables (in conjunction with above); this needs to be explicitly shown as kids never realize they can inspect their data à la Excel in RStudio Plot window Files window (expanded on in R Workflow chapter) Tearable tabs; again, kids dont realize you can tear off a tab into a new window so you can see your data and code side-by-side (click and drag tab to tear off). Customization (i.e. themes for dark-mode) Brief style guide Packages loaded at the top. How to comment code (#Im cold and there are wolves after me) -Suggestion for variable names (good_name vs. thisNameWillWork_butIsAwfulToType); including forbidden names -Script headers (i.e. # heading1, ## subheading); These are picked-up by RStudio and displayed in the Document Outline box allowing easy navigation of long scripts. "],["r-workflows.html", "Chapter 3 R Workflows 3.1 Creating an RStudio Project 3.2 Navigating RStudio 3.3 Dark Mode", " Chapter 3 R Workflows Just like theres a common workflow in any chemistry lab (pre-lab, collect reagents, conduct experiment, etc.) theres a workflow when working with R. This is by no means the only way to work, but its tried and true and will serve you well as you tackle your coursework. 3.1 Creating an RStudio Project When you open RStudio for the first time, this is what you should see: RStudio Default View The version of R you just installed should appear in the main window here: RStudio - R Version (If this message does not appear, go to Tools-&gt;Global Options and make sure that the R version box is set to the correct folder.) Before doing anything else, lets create an R Project. This will establish a default folder for RStudio and bundle together all your code files in one place. Go to File-&gt;New Project. Click New Directory, then New Project. Next, youll be asked to choose a subdirectory name and location. The name can be whatever you want, but we highly recommend that you create the directory in the same parent folder as your data. Click Create Project, and you should now see your chosen file path displayed in the bottom-right window: RStudio Project Folder You are now ready to use R! If youre in a hurry, you can skip straight to Chapter 2: Organizing Your Data, but we recommend you finish this chapter to familiarize yourself with RStudios layout. 3.2 Navigating RStudio RStudio has 4 main windows, 3 of which should currently be visible. To see the fourth window, go to File-&gt;New File-&gt;R Script. You should now be able to see all 4 main windows: RStudio Quadrants 3.2.1 R Environment This window is the least important for our purposes. In brief, it will list all variables, packages, and functions which you have run since opening RStudio. 3.2.2 Viewer The Viewer window has a couple of useful tabs. We will mainly use it to export plots (more on that in later chapters), but you can also open code files from the Files tab without having to leave RStudio. 3.2.3 Console This is where you can type and run code directly, but you will mainly be using the Scripts window to run code (see below). Your primary use of the console will be for installing packages (more on that later). Another thing that the Console window is useful for is quick arithmetic. Try typing 2+2 in the console, then hit Enter. 2+2 ## [1] 4 3.2.4 Scripts R code files are called scripts, and are saved as *.R files. Whenever you copy code blocks from this website, paste them into the Scripts window. You can then run specific lines by highlighting them and pressing Ctrl+Enter (Cmd+Enter on Mac), or clicking the Run button in the top right of this window. 3.3 Dark Mode Lastly, some of you may be interested in how to set RStudio to Dark Mode. Simply go to Tools-&gt;Global Options, then click Appearance on the left. Then select your preferred Editor Theme from the list. (My personal preference is Tomorrow Night Bright) RStudio Dark Themes "],["using-r-markdown.html", "Chapter 4 Using R Markdown 4.1 Lets dig a little deeper 4.2 How do I get started with R markdown? 4.3 So now what do I do with R Markdown?", " Chapter 4 Using R Markdown In a nutshell, R Markdown allows you to analyse your data with R and write your report in the same place (this document is written with R Markdown). This has loads of benefits including increased reproducibility, and streamlined thinking. No more flipping back and forth between coding and writing to figure out whats going on. Lets run some simple code as an example: # Look at me go mom x &lt;- 2+2 x ## [1] 4 What weve done here is write a snippet of R code, ran it, and printed the results (as they would appear in the console). While the above code isnt anything special, we can extend this concept so that our R markdown document contains any data, figures or plots we generate throughout our analysis in R. Pretty neat, eh? You might not think so, but lets imagine a scenario youll encounter soon enough. Youre about to submit your assignment, youve spent hours analyzing your data and beautifying your plots. Everything is good to go until you notice at the last minute you were supposed to subtract value x and not value y in your analysis. If you did all your work in Excel (tsk tsk), youll need to find the correct worksheet, apply the changes, reformat your plots, and import them into word (assuming everything is going well, which is never does with looming deadlines). Now if you did all your work in R markdown, you go to your one .rmd document, briefly apply the changes and re-compile your document. 4.1 Lets dig a little deeper What weve done here is write a snippet of R code, ran it, and printed the results (as they would appear in the console). While the above code isnt anything special, we can extend this concept so that our R markdown document contains any data, figures or plots we generate throughout our analysis in R. For example: library(tidyverse) library(knitr) airPol &lt;- read_csv(&quot;./data/Toronto_60433_2018_Jan2to8.csv&quot;, na = &quot;-999&quot;) kable(airPol[1:5, ], caption = &quot;Example table of airborne pollutant levels used for Figure 1.&quot;) Table 4.1: Example table of airborne pollutant levels used for Figure 1. temperature pollutant concentration date -11.7 NO2 41 2018-01-01 19:00:00 -11.7 O3 2 2018-01-01 19:00:00 -11.3 NO2 28 2018-01-01 20:00:00 -11.3 O3 14 2018-01-01 20:00:00 -11.6 NO2 20 2018-01-01 20:59:59 ggplot(airPol, aes(date, concentration, colour = pollutant)) + geom_line() + theme_classic() Figure 4.1: Time series of 2018 ambient atmospheric O3 and NO2 concentrations (ppb) in downtown Toronto Pretty neat, eh? You might not think so, but lets imagine a scenario youll encounter soon enough. Youre about to submit your assignment, youve spent hours analyzing your data and beautifying your plots. Everything is good to go until you notice at the last minute you were supposed to subtract value x and not value y in your analysis. If you did all your work in Excel (tsk tsk), youll need to find the correct worksheet, apply the changes, reformat your plots, and import them into word (assuming everything is going well, which is never does with looming deadlines). Now if you did all your work in R markdown, you go to your one .rmd document, briefly apply the changes and re-compile your document. 4.2 How do I get started with R markdown? As youve already guessed, R markdown documents use R and are most easily written and assembled in the R Studio IDE. If you have not done so, download R from the comprehensive R archive network (CRAN), link here: http://cran.utstat.utoronto.ca/, and R Studio, link here: https://rstudio.com/products/rstudio/download/). Follow the listed instructions and you should be well on your way. You can also see the accompanying Working with RStudio document on Quercus for additional top tips. Once setup with R and R Studio, well need to install the rmarkdown and tinytex packages. In the console, simply run the following code: install.packages(&quot;rmarkdown&quot;) # downloaded from CRAN install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # install TinyTeX The rmarkdown package is what well use to generate our documents, and the tinytex package enables compiling documents as PDFs. Theres a lot more going on behind the scenes, but you shouldnt need to worry about it. Now that everything is setup, you can create your first R Markdown document by opening up R Studio, selecting FILE -&gt; NEW FILE -&gt; Rmarkdown. A dialog box will appear asking for some basic input parameters for your R markdown document. Add your title and select PDF as your default output format (you can always change these later if you want). A new file should appear thats already populated with some basic script illustrating the key components of an R markdown document. 4.2.1 Great, now whats going on with this R markdown document? Your first reaction when you opened your newly created R markdown document is probably that it doesnt look anything at all like something youd show your TA. Youre right, what youre seeing is the plain text code which needs to be compiled (called knit in R Studio) to create the final document. Lets break down what the R markdown syntax means then lets knit our document. When you create a R markdown document like this in R Studio a bunch of example code is already written. You can compile this document (see below) to see what it looks like, but lets break down the primary components. At the top of the document youll see something that looks like this: --- title: &quot;Untitled&quot; author: &quot;Jean Guy Rubberboots&quot; date: &quot;20/04/2021&quot; output: pdf_document --- This section is known as the preamble and its where you specify most of the document parameters. In the example we can see that the document title is Untitled, its written by yours truly, on the 24th of August, and the default output is a PDF document. You can modify the preamble to suit your needs. For example, if you wanted to change the title you would write title: \"Your Title Here\" in the preamble. Note that none of this is R code, rather its YAML, the syntax for the documents metadata. Apart from whats shown you shouldnt need to worry about this much, just remember that indentation in YAML matters. Reading further down the default R markdown code, youll see different blocks of text. In R markdown anything you write will be interpreted as body text (i.e .the stuff you want folks reading like this) in the knitted document. To actually run R code youll need to see the next section. 4.2.2 How to run R code in R Markdown Theres two ways to write R code in markdown: Setup a code chunk. Code chunks start with three back-ticks like this: ```{r}, where r indicates youre using the R languauge. You end a code chunk using three more backticks like this ```. Specify code chunks options in the curly braces. i.e. ```{r, fig.height = 2} sets figure height to 2 inches. See the Code Chunk Options section below for more details. Inline code expression, which starts with `r and ends with ` in the body text. Earlier we calculated x &lt;- 2 + 2, we can use inline expressions to recall that value (ex. We found that x is 4) A screenshot of how this document, the one youre reading, appeared in R Studio is shown in Figure 2. To actually run your R code you have two options. The first is to run the individual chunks using the Run current chunk button (See figure 2). This is a great way to tinker with your code before you compile your document. The second option is to compile your entire document using the Knit document button (see Figure 2). Knitting will sequentially run all of your code chunks, generate all the text, knit the two together and output a PDF. Youll basically save this for the end. Note all the code chunks in a single markdown document work together like a normal R script. That is if you assign a value to a variable in the first chunk, you can call this variable in the second chunk; the same applies for libraries. Also note that every time you compile a markdown document, its done in a fresh R session. If youre calling a variable that exist in your working environment, but isnt explicitly created in the markdown document youll get an error. How this document, the one youre reading, appeared in RStudio; to see the final results scroll up to Figure 1. Note the knit and run current chunk buttons. 4.2.3 How do I go from R markdown to something I can hand-in To create a PDF to hand in youll need to compile, or knit, your entire markdown document as mentioned above. To knit (or compile) your R markdown script, simply click the knit button in R Studio (yellow box, Figure 2). You can specify what output you would like and R Studio will (hopefully) compile your script. If you want to test how your code chunks will run, R Studio shows a little green play button on the top right of every code chunk. this is the run current chunk button, and clicking it will run your code chunk and output whatever it would in the final R markdown document. This is a great way to tweak figures and codes as it avoids the need to compile the entire document to check if you managed to change the lines from black to blue in your plot. 4.3 So now what do I do with R Markdown? You do science and you write it down! In all seriousness though, this document was only meant to introduce you to R markdown, and to make the case that you should use it for your ENV 316 coursework. A couple of the most useful elements are talked about below, and there is a wealth of helpful resources for formatting your documents. Just remember to keep it simple, theres no need to reinvent the wheel. The default R markdown outputs are plenty fine with us. 4.3.1 R Markdown resources and further reading Theres a plethora of helpful online resources to help hone your R markdown skills. Well list a couple below (the titles are links to the corresponding document): Chapter 2 of the R Markdown: The Definitive Guide by Xie, Allair &amp; Grolemund (2020). This is the simplest, most comprehensive, guide to learning R markdown and its available freely online. The R markdown cheat sheet, a great resource with the most common R markdown operations; keep on hand for quick referencing. Bookdown: Authoring Books and Technical Documents with R Markdown (2020) by Yihui Xie. Explains the bookdown package which greatly expands the capabilities of R markdown. For example, the table of contents of this document is created with bookdown. 4.3.2 R code chunk options You can specify a number of options for an individual R code chunk. You include these at the top of the code chunk. For example the following code tells markdown youre running code written in R, that when you compile your document this code chunk should be evaluated, and that the resulting figure should have the caption Some Caption. A list of code chunk options is shown below: ```{r, eval = FALSE, fig.cap = &quot;Some caption&quot;} # some code to generate a plot worth captioning. ``` option default effect eval TRUE whether to evaluate the code and include the results echo TRUE whether to display the code along with its results warning TRUE whether to display warnings error FALSE whether to display errors message TRUE whether to display messages tidy FALSE whether to reformat code in a tidy way when displaying it fig.width 7 width in inches for plots created in chunk fig.height 7 height in inches for plots created in chunk fig.cap NA include figure caption, must be in quotation makrs (\"\") 4.3.3 Inserting images into markdown documents Images not produced by R code can easily be inserted into your document. The markdown code isnt R code, so between paragraphs of bodytext insert the following code. Note that compiling to PDF, the LaTeX call will place your image in the optimal location, so you might find your image isnt exactly where you though it would be. A quick google search can help you out if this is problem. ![Caption for the picture.](path/to/image.png){width=50%, height=50%} Note that in the above the use of image atributes, the {width=50%, height=50%} at the end. This is how youll adjust the size of your image. Other dimensions you can use include px, cm, mm, in, inch, and %. 4.3.4 Generating Tables Theres multiple methods to create tables in R markdown. Assuming you want to display results calculated through R code, you can use the kable() function. Please consult Chapter 10 of the R Markdown Cookbook for additional support. Alternatively, if you want to create simple tables manually use the following code in the main body, outside of an R code chunk. You can increase the number of rows/columns and the location of the horizontal lines. To generate more complex tables, see the kable() function and the kableExtra package. Header 1 | Header 2| Header 3 ---------|---------|---------| Row 1 | Data | Some other Data Row 2 | Data | Some other Data ---------|---------|---------| Header 1 Header 2 Header 3 Row 1 Data Some other Data Row 2 Data Some other Data 4.3.5 Spellcheck in R Markdown While writing an R markdown document in R studio, go to the Edit tab at the top of the window and select Check Spelling. You can also use the F7 key as a shortcut. The spell checker will literally go through every word it thinks youve misspelled in your document. You can add words to it so your spell checkers utility grows as you use it. Note that the spell check with also check your R code; be wary of changing words in your code chunks because you may get an error down the line. 4.3.6 Quick reference on R markdown syntax Inline formatting; which is used to format your text. Numbered lists Normal lists Lists Block-level elements, i.e. youre section headers Example R markdown syntax used for formatting shown above: - **Inline formatting**; *which* is ~used~ to ^format^ `your text`. 1. Numbered lists - Normal lists - Lists - **Block-level elements**, i.e. your section headers # Headers ## Headers ### Headers "],["intro-to-data-analysis.html", "Chapter 5 Intro to Data Analysis", " Chapter 5 Intro to Data Analysis introducing the import -&gt; tidy -&gt; transform &lt;-&gt; visualize &lt;-&gt; model &lt;-&gt; communicate workflow map where theyll learn these in the upcoming sections emphasis this is how they should tackle every problem from now on. "]]
