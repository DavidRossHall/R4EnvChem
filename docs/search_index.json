[["index.html", "R for Environmental Chemists Preface 0.1 Providing Feedback Authors", " R for Environmental Chemists David Hall, Steven Kutarna, Kristen Yeh, Hui Peng and Jessica Deon Last built on: 2021-08-09 Preface Howdy, This website is more-or-less the living results of a collaborative project between us. Were not trying to be an exhaustive resource for all environmental chemist. Rather, were focusing on developing broadly applicable data science course content (tutorials and recipes) based in R for undergraduate environmental chemistry courses and research. Note that none of this has been reviewed yet and is not implemented in any capacity in any curriculum. This book will ultimately be broken up into four sections: Section 1: Getting Setup in R is a general guide for the complete novice that will help you install, setup, and run R code. It features a useful tutorial exercise to make sure you have a working script before starting courses. Section 2: Data Analysis in R introduces data analysis workflows and showcases how you can use R and the tidyverse to tackle the vast majority of the data science/analysis problems youll encounter in undergraduate environmental chemistry courses. Section 3 explores the theory behind the most common data analysis practices in environmental chemistry. These include linear regression analysis, plotting, etc. Section 4 consist of chapters specific to individual laboratory experiments. They rely upon knowledge from the previous three sections to introduce concepts unique to individual labs. We recommend everyone reads over the first two sections in sequential order to understand the general R workflow employed in this, and all other, environmental chemistry courses. 0.1 Providing Feedback If you notice an error/mistake or have suggestiosn for adding features or improving the book, please reach out to any of the Authors or flag an issue on this books github repo at https://github.com/DavidRossHall/R4EnvChem Authors If you have any questions/comments/suggestions/concerns please email: Dave at davidross.hall@mail.utoronto.ca Steven at steven.kutarna@mail.utoronto.ca Kristen at kristen.yeh@mail.utoronto.ca Dr.Â Deon at jessica.deon@utoronto.ca "],["installing-r.html", "Chapter 1 Installing R 1.1 Prerequisite software 1.2 Running R Code 1.3 Customizing RStudio 1.4 Where to get help 1.5 Summary", " Chapter 1 Installing R Youve probably heard of coding and the R language, but figure out how to get started can be a hurdle; at least it was for us. This chapter will cover installing the software youll need for coding in R. 1.1 Prerequisite software Before we get started, youll need to download the following open source and free software: R RStudio tidyverse suite of packages Read on for instructions on downloading all three. 1.1.1 R R is the programming language well code in. R is hosted on the Comprehensive R Archive Network (CRAN) and is one of the most popular programming languages for statisticians and scientist alike. You can download the latest build for your operating system here. A quick aside, but coding is simply writing instructions for the computer to execute. To do this, we need a language that both we, humans, and the computer can understand. For our needs well use R, and like any language R has its own syntax, rules, and quirks. Well revisit this in subsequent sections. 1.1.2 Downloading RStudio IDE RStudio is the integrated development environment of choice when working with R. Its where youll actually be typing your code and interacting with R. Again, R is a language, and you need somewhere to write it down to make use of it. Writing in English can be done with a pencil and notepad or a word processor filed with useful tools to help you write. This is what RStudio is for R. You can download the latest version of RStudio here. Once you have R and RStudio installed go ahead and open up RStudio. Once you open RStudio, youll be greeted with an interface divided into numerous panes Weve highlighted the major ones in the image below: The RStudio interface with annottated regions Each pane serves a specific role: The console allows you to directly type and run your code. It also provides messages, warnings, and errors from any code you run. The environment window lists all variables, data, and functions youve created since the start of your coding session. The viewer shows your outputs, help documents, etc. which each has their own tab. 1.1.3 Installing packages Packages are previously written snippets of code that extend the capabilities of base R. Typically packages are created to address specific issues or workflows in different types of analysis. This book will make frequent use of a family of packages called the tidyverse. These packages all share a common thought process and integrate naturally with one another. You can download the entire suite of tidyverse packages by simply copy and pasting the following code into the console and pressing enter. install.packages(&quot;tidyverse&quot;) Youll see a flurry of lines printed to the console indicating the status of the installation. Once installed you wont be able to use these functions until you load it with library(). Enter the code below into the console to load the tidyverse package. library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.3 v purrr 0.3.4 ## v tibble 3.1.2 v dplyr 1.0.6 ## v tidyr 1.1.3 v stringr 1.4.0 ## v readr 1.4.0 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() The output shows us which packages are included in the tidyverse() and their current version numbers, as well as conflicts (where functions from different packages share the same name). Dont worry about these for now. 1.2 Running R Code As weve already seen, you can run bits of R code directly from the console. Throughout the book, code you can copy and run will look like this: 2 + 2 ## [1] 4 Noticed that both the code (the first part) and what the code outputs (the second part) are shown. Throughout this book code outputs will be proceeded by ##. You can run code directly from the console. Its handy for short and sweet snippets of code, something that can be typed in a single line. Examples of this is the install.packages() function, or to use R as a calculator: 2 * 3 ## [1] 6 pi * (10/2) ## [1] 15.70796 However, working like this isnt very useful Imagine printing a book one sentence at a time, you couldnt really go back and edit earlier work because its already printed. Thats why we write out code in scripts. Scripts are similar to recipes, in that theyre a series of instructions that R evaluates from the top of the script to the bottom. More importantly, writing your code out in a script makes it more readable to humans (presumably this includes you). Dont undervalue the usefulness of legible code. Your code will evaluate in seconds or minutes whereas it may take you hours to understand what it does. Lets open up a new script in RStudio by going to File-&gt;New File-&gt;R Script, or by clicking on the highlighted button in the image below. Figure 2.5: Opening a new script in RStudio. This should open up a new window in the RStudio interface, as shown in the following image. Figure 2.6: Scripts window in RStudio. You can copy and paste the code above into the script, save it, edit it, etc. and ultimately run specific lines of code by highlighting them and pressing Ctrl+Enter (Cmd+Enter on Mac), or by clicking the Run button in the top right corner of the Scripts window. Whenever you copy code blocks from this website (or other online sources). If youre reading this book online, you can easily copy an entire block of code using the copy button in the top right corner of the code block. Well dive into the basics of coding in R in the next chapter. 1.3 Customizing RStudio As many of us spend an absurd amount of time staring at bright screens, some of you may be interested in setting your RStudio to Dark Mode. You can customize the appearance of your RStudio interface by clicking Tools-&gt;Global Options, or RStudio-&gt;Preferences on Mac, then clicking Appearance on the left. Select your preferred Editor Theme from the list. Figure 2.4: RStudio Appearance customization window. 1.4 Where to get help While its often tempting to contact your TA or Professor at the first sign of trouble, its often better to try and resolve your issues on your own, especially if theyre related to technical issues in R. Given the popularity of R, if youve run into an issue, someone else has too and they complained about it and someone else has solved it! An often unappreciated aspect of coding/data science is knowing how to get help, how to search for it, and how to translate someones solutions to your unique situation. Places to get help include: Google, Stack Overflow, etc. When in doubt Google it. Using built-in documentation (?help) reference books such as the invaluable R for Data Science, which inspired this entire project. And yes, when all else fails, holler at your TA/profs. 1.5 Summary In this chapter weve covered: Installing and running R and RStudio Running R code from the console Installing the tidyverse() package, the basis of the subsequent code in this book How to customize the appearance of RStudio so you dont burn out your eyes at night Move on to the next chapter where well break down how to setup your work in R for legibility, simplicity, and reproducibility. After all, the person cursing any of your sloppy work will invariably be you, so be kind to yourself, and do it right the first time. "],["r-studio-projects.html", "Chapter 2 R Studio Projects 2.1 Paths and directories 2.2 Importing a project 2.3 Summary 2.4 Creating an RStudio project", " Chapter 2 R Studio Projects Youre probably eager to start coding, but an equally important aspect is understanding the structure of your work. Knowing how to organize the files needed for your analysis and how to access them is critical. Moreover, understanding this early on will save you plenty of time and heartaches down the line. So lets hold off on coding and consider where were working on your computer. Because we believe in it so much, well say it up top: Always work inside an RStudio Project, and use a unique project for each lab/experiment. 2.1 Paths and directories Before you get started with running your code, it is good to know where your analysis is actually occurring, or where your working directory is. The working directory is the folder where R looks for files that you have asked it to import, and the folder where R stores files that you have asked it to save. RStudio displays the current working directory at the top of the console, as shown below, but can also be printed to the console using the command getwd(). By default, R usually sets the working directory to the home directory on your computer. The ~ symbol denotes the home directory, and can be used as a shortcut when writing a path that references the home directory. You can change the working directory using setwd() and an absolute file path. Absolute paths are references to files which point to the same file, regardless of what your working directory is set to. In Windows, absolute paths begin with \"C:\", while they begin with with a slash in Mac and Linux (i.e., \"/Users/Vinny/Documents\"). It is important to note that absolute paths and setwd() should never be used in your scripts because they hinder sharing of code  no one else will have the same file configuration as you do. If you share your script with your TA or Prof, they will not be able to access the files you are referencing in an absolute path. Thus, they will not be able to run the code as-is in your script. In order to overcome the use of absolute paths and setwd(), we strongly recommend that you conduct all work in RStudio within an R project. When you create an R project, R sets the working directory to a file folder of your choice. Any files that your code needs to run (i.e., data sets, images, etc.) are placed within this folder. You can then use relative paths to refer to data files in the project folder, which is much more conducive to sharing code with colleagues, TAs, and Profs. 2.2 Importing a project While you can create a project from scratch (discussed below), weve created a draft project template. Download it, and youll have a working RStudio project that you can use as you follow along with the code in the rest of this chapter and the tutorial exercise. Downloading the template project from the GitHub repository here; there are instructions on downloading at the bottom of the repositories webpage. a. Unzip the project folder somewhere useful/that makes sense to you (i.e.Â a folder for schoolwork). From RStudio click File -&gt; Open Project... and open the R4EnvChem-ProjectTemplate.Rproj file. If youve followed the steps above you should have successfully downloaded and opened an RStudio project, and it should look like this: Note how the project name is displayed on the top right. You can quickly switch between projects here which is useful if youll be using R for many different labs/courses. As well, take note that the working directory has changed to the one where the RStudio project is located. Since youve downloaded the entire project, the working directory for the project includes the example scripts and data files youll need to continue along with the remainder of this book. If you open the project folder (or access it from the Files tab) it should look like this: R4EnvChem-ProjectTemplate  R4EnvChem-ProjectTemplate.Rproj  Rscript-example.R | Rmarkdown-example.rmd  data  2018-01-01_60430_Toronto_ON.csv  2018-07-01_60430_Toronto_ON.csv | ...  images  DHall_TorontoPano.jpg With the R4EnvChem-ProjectTemplate.Rproj file located in the main folder, this is important as well be able to readily look for files we stored in project subfolders such as data and images. In the future you can create your own projects from scratch, but it behooves you to follow the template layout. Having consistently named folders youll use in every project will help simplify your life down the road. 2.3 Summary In this chapter weve covered: Importing the R4EnvChem Project Template so we have access to data for the tutorial (amongst other things) The concept of paths and directories and how relative referencing withing a project greatly simplify this Well further sermonize about the usefulness of projects later on, but now that weve gotten a working project with some data, lets move onto the next session to begin to code. 2.4 Creating an RStudio project Weve provided instructions on creating your own RStudio project from scratch, but you can always copy the template project folder above (or any for that matter) to re-purpose it as you see fit. To create a new project: go to File-&gt;New Project, or click the button highlighted in the image below. Click New Directory, then New Project. You may want your project directory to be a sub-folder of an existing directory on your computer which already contains your data sets. If this is the case, click Existing Directory instead of New Directory at the previous step, and then select the folder of your choice. Next, youll be asked to choose a sub-directory name and location. Enter your selected name and choose an appropriate location for the folder on your computer. Click Create Project, and you should now see your chosen file path displayed in the bottom-right window: As mentioned previously, you can also view the file path to your project directory using getwd(). The output should match the file path shown in the image above. When working on assignments for coursework, it is good practice to create a new R project for each assignment you work on. You should store the data, images, and any other files required for that assignment within the folder for the designated R project. You can create sub-folders for data and images, however, you may want to avoid making too many nested sub-folders, as this will make your paths long and tiresome to type. For a hypothetical course with 5 Labs (cough CHM410 cough), your coursework would look like this: CHM410 |  Project 1 | | | | project1.Rproj | | project1WriteUp.Rmd | data |  ... | images | ... |  Project 2 | | project2.Rproj | project2WriteUp.Rmd data  ... images ... ... With a seperate folder for each experiment, and within each folder is an RStudio project, data, images, and other files required for that specific project. You shouldnt have nested R studio project as their is no benefit to this approach. Keep everything you need in one location, and no more. "],["r-coding-basics.html", "Chapter 3 R coding basics 3.1 Variables 3.2 Data Types 3.3 Data Structures 3.4 Other data structures 3.5 R packages and functions 3.6 Summary", " Chapter 3 R coding basics Now that you know how to navigate RStudio and have a working project, well take a look at the basics of R. As were chemist first, and not computer programmers, well try and avoid as much of the nitty-gritty underneath the hood aspects of R. However, a risk of this approach is being unable to understand errors and warnings preventing your code from running. As such, well introduce the most important and pertinent aspects of the R language to meet your environmental chemistry needs. 3.1 Variables Weve already talked about how R can be used like a calculator: (1000 * pi) / 2 ## [1] 1570.796 (2 * 3) + (5 * 4) ## [1] 26 But managing these inputs and outputs is simplified with variables. Variables in R, like those youve encountered in math class, can only have one value, and you can reference or pass that value along by referring the variable name. And, unlike the variables in math classes, you can change that value whenever you want. Another way to think about it that a variable is a box in which you store your value. When you want to move (reference) your value, you move the box (and whatever is inside of it). Then you can simply open the box somewhere else without having to worry about the hassle of whats inside. You can assign the outputs variables using &lt;-, as shown below. x &lt;- 12 x ## [1] 12 In addition to reading code top to bottom, you often read it from right to left. x &lt;- 12 would be read as take the value 12 and store it into the variable x. The second line of code, x, simply returns the value stored inside x. Note that when a variable is typed on it own, R will print out its contents. You can now use this variable in snippets of code: x ## [1] 12 x &lt;- x * 6.022e23 x ## [1] 7.2264e+24 Remember, were evaluating from right to left, so the code above is taking the number 6.022e23 and multiplying it by the value of x, which is 12 and storing that value back into x. Note that variable names are case sensitive, so if your variable is named x and you type X into the console, R will not be able to print the contents of x. Variable names can consist of letters, numbers, dots (.) and/or underlines (_). Here are some rules and guidelines for naming variables in R: Rules dictated by R names must begin with a letter or with the dot character. var and .var are acceptable. Variable names cannot start with a number or the . character cannot be preceded by number. var1 is acceptable, 1var and .1var are not. Variable names cannot contain a space. var 1 is interpreted as two separate values, var and 1. Certain words are reserved for R, and cannot be used as variable names. These include, but are not limited to, if, else, while, function, for, in, next, break, TRUE, FALSE, NULL, Inf, NA, and NaN Good names for variables are short, sweet, and easy to type while also being somewhat descriptive. For example, lets say you have an air pollution data set. A good name to assign the data set to would be airPol or air_pol, as these names tell us what is contained in the data set and are easy to type. A bad name for the data set would be airPollution_NOx_O3_June20_1968. While this name is much more descriptive than the previous names, it will take you a long time to type, and will become a bit of a nuisance when you have to type it 10+ times to refer to the data set in a single script. Please refer to the Style Guide found in Advanced R by H. Wickham for more information. Lastly, R evaluates code from top-to-bottom of your script. So if you reference a variable it must have already been created at an earlier point in your script. For example: y + 1 ## Error in eval(expr, envir, enclos): object &#39;y&#39; not found y &lt;- 12 The code above returns the object 'y' not found error because were adding + 1 to y which hasnt been created yet, its created on the next line. These errors also pop up when you edit your code without clearing your workplace. All variables created in a session are stored in the working environment so you can call them, even if you change your code. This means you can accidentally reference a variable that isnt reproduced in the latest iteration of your code. Consequently, a good practice is to frequently clear your work-space suing the broom button in the environment pane. This will help you to ensure the code youre writing will is organized in the correct order; see Saving R scripts for why this is important. 3.2 Data Types Data types refer to how data is stored and handled by and in R. You can really get into the weeds on this, but well focus on the most common types so you can get started on your work. Firstly, here are the data types youll likely be working with: character: \"a\", \"howdy\", \"1\", is used to represent string values in R. Basically its text that youd read. Note the quotation marks and the fact that \"1\", despite being a number, is stored as a character. numeric (real or decimal): 2, 3.14, 6.022e23. integer: 2L, note the L tells R this is an integer. logical: either TRUE or FALSE There are some helpful functions to test the data type of a value in R as a frequent source of error and frustration are values stored in the wrong data type. x &lt;- &quot;6&quot; x / 2 ## Error in x/2: non-numeric argument to binary operator Youll see the error above frequently, and its simply saying youre trying to do math on something you cant do math on. You might think if x is 6, why cant I divide it by 2? Lets see what type of data x is: is.numeric(x) # test if numeric ## [1] FALSE is.logical(x) # test if logical ## [1] FALSE is.integer(x) # test if integer ## [1] FALSE is.character(x) # test if character ## [1] TRUE So the value of x is a character, in other words R treats it as a word, and we cant do math on that (think, how would you divide a word by a number?). So lets convert the data type of x to numeric to proceed. x ## [1] &quot;6&quot; x &lt;- as.numeric(x) is.numeric(x) ## [1] TRUE x ## [1] 6 x / 2 ## [1] 3 So weve converted our character string \"6\" to the numerical value 6. Keep in mind there are other conversion functions which are described elsewhere, but you cant always convert types. In the above example we could convert a character to numeric because it was ultimately a number, but we couldnt do the same if the value of x was \"six\". 3.3 Data Structures Data structures refers to how R stores data. Again, its easy to get lost in the weeds here so well focus on the most common and useful data types for your work which will overwhelmingly be data frames. Data frames consist of data stored in rows and columns. If youve ever worked with a spreadsheet (i.e.Â Excel), its essentially that with the caveat that all data stored in a column must be of the same type. Again, different columns can have different data types, but within a column all the data needs to be the same type. R will convert your data otherwise to make it all the same. A common error is a single character in a column of numerical values leading to the entire column to be interpreted as character values; similar to what we discussed above. Errors like this most often stem from mistakes in recording and importing your data so be careful! From the R4EnvChem-ProjectTemplate, lets import some real data as follows by typing the following into the console: # Install and open tidyverse if you haven&#39;t already # install.packages(&quot;tidyverse&quot;) # library(tidyverse) airPol &lt;- read_csv(&quot;data/2018-01-01_60430_Toronto_ON.csv&quot;) ## ## -- Column specification -------------------------------------------------------- ## cols( ## naps = col_double(), ## city = col_character(), ## p = col_character(), ## latitude = col_double(), ## longitude = col_double(), ## date.time = col_datetime(format = &quot;&quot;), ## pollutant = col_character(), ## concentration = col_double() ## ) The above is air quality data measured in downtown Toronto around January 2018. The Column specification are a useful feature of read_csv() and tells us what data type each column stores. Some of the variables are: naps, city, p, latitude, longitude to tell you where the data was measured. data.time for when the measurements were taking. pollutant for the chemical measured concentration for the measured concentration in parts-per-million (ppm). Youll note that weve assigned it to the variable: airPol. This is so we can referece it and make use of it later on (see below). If we didnt do this our data would simply be printed to the console which isnt helpful for us. Lets take a look at the data itself: # a variable by itself will return it&#39;s contents airPol ## # A tibble: 507 x 8 ## naps city p latitude longitude date.time pollutant ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 60430 Toronto ON 43.7 -79.5 2018-01-01 00:00:00 O3 ## 2 60430 Toronto ON 43.7 -79.5 2018-01-01 00:00:00 NO2 ## 3 60430 Toronto ON 43.7 -79.5 2018-01-01 00:00:00 SO2 ## 4 60430 Toronto ON 43.7 -79.5 2018-01-01 01:00:00 O3 ## 5 60430 Toronto ON 43.7 -79.5 2018-01-01 01:00:00 NO2 ## 6 60430 Toronto ON 43.7 -79.5 2018-01-01 01:00:00 SO2 ## 7 60430 Toronto ON 43.7 -79.5 2018-01-01 02:00:00 O3 ## 8 60430 Toronto ON 43.7 -79.5 2018-01-01 02:00:00 NO2 ## 9 60430 Toronto ON 43.7 -79.5 2018-01-01 02:00:00 SO2 ## 10 60430 Toronto ON 43.7 -79.5 2018-01-01 03:00:00 O3 ## # ... with 497 more rows, and 1 more variable: concentration &lt;dbl&gt; Here we see that the data is stored tidy, which is to say each column is a variable and each row is an observation. So reading the first row, we know that the Toronto 60430 station on 2018-07-01 at midnight measured ambient O3 concentrations of 46 ppm (Note the concentration column isnt printed due to width). The concept of tidy data is important and is integral to working in R. Its discussed further in Tidying your data. Lastly, R will only output a small chunk of our data for us to see. If youd like to see it in full, go the the Environment pane and double click on the airPol data. 3.3.1 Accessing data in subfolders Note that read_csv() requires us to specify the file name, but in the above example we prefixed our file name with \"data/2018...\". This is because the .csv file we want to open is stored in the data sub-folder. By specifying this in the prefix, we tell read_csv() to first go to the data sub folder in the working directory and then search for and open the specified data file. What weve done above is called relative referencing and its a huge benefit of projects. The actual data file is stored somewhere on your computer in a folder like \"C:/User/Your_name/Documents/School/Undergrad/Second_Year/R4EnvChemTemplate/data/2018-01-01_60430_Toronto_ON.csv\". If we werent in a project, this is what youd need to type to open your file, but since were working in the project, R assumes the long part, and begins searching for files inside the project folder. Hence, why we only need \"data/2018...\". Not only is this much simpler to type, and but it makes sharing your work with colleagues, TAs, and Profs (and yourself!) much easier. In other words, if you wanted to share your code, you would send the entire project folder (code &amp; data) and the receiver could open it and run it as is. 3.4 Other data structures R has several other data structures. They arent as frequently used, but its worth being aware of their existence. Other structures include: Vectors contain multiple elements of the same type; either numeric, character (text), logical, or integer. Vectors are created using c(), which is short for combine. A data frame is just multiple vectors arranged into columns. Some examples of vectors are shown below. num &lt;- c(1, 2, 3, 4, 5) num ## [1] 1 2 3 4 5 char &lt;- c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;) char ## [1] &quot;blue&quot; &quot;green&quot; &quot;red&quot; log &lt;- c(T, T, T, F, F, F) log ## [1] TRUE TRUE TRUE FALSE FALSE FALSE Lists are similar to vectors in that they are one dimensional data structures which contain multiple elements. However, lists can contain multiple elements of different types, while vectors only contain a single type of data. You can create lists using list(). Some examples of lists are shown below. You can use str() to reveal the different components of a list, in a more detailed format than if you were to simply type the assigned name of the list. hi &lt;- list(&quot;Hello&quot;, c(5,10,15,20), c(T, T, F)) str(hi) ## List of 3 ## $ : chr &quot;Hello&quot; ## $ : num [1:4] 5 10 15 20 ## $ : logi [1:3] TRUE TRUE FALSE hi ## [[1]] ## [1] &quot;Hello&quot; ## ## [[2]] ## [1] 5 10 15 20 ## ## [[3]] ## [1] TRUE TRUE FALSE There are many freely available resources online which dive more in depth into different data structures in R. If you are interested in learning more about different structures, you can check out the Data structure chapter of Advanced R by Hadley Wickham. 3.5 R packages and functions Functions are bits of code written to execute a specific task. Weve already used several functions such as library() to import packages, and read_csv() to read the air quality data as seen in Data Structures above. Functions offer a convenient means to reduce the amount of typing while making code more reliable and readable. Some of these functions are built into R, such as library(), but often people write new functions to improve upon base R to help it meet the needs of its users, such as the read_csv(). A collection of functions for a similar tasks is stored in a package, such as the tidyverse suite of packages which contains functions for plotting (ggplot2), reading data read_csv() and more. Lets take a look at one of the functions youll be using the most: ggplot from the ggplot2 package which is included in the tidyverse. 3.5.1 ggplot2 ggplot allows you to create a variety of visualizations to explore and communicate your data and results. Like every function, ggplot has required arguments, i.e.Â data and instructions you pass to the function. The required arguments for this function are the data to be plotted and the aesthetic mappings for how the plot should look. Using our loaded air quality data from above, you can copy and paste the following code in the console: ggplot(data = airPol, aes(x = date.time, y = concentration, colour = pollutant)) + geom_point() Breaking this down: Were calling ggplot() in the first line and passing the arguments inside the parentheses Were specifying that we want to plot the loaded air pollution data with data = airPol We insert a , to separate each argument We specified the aesthetics (aes()) arguments: x = data.time means our x-axis will be the data in the data.time column. y = concentration means our y-axis will be the data in the concentration column. colour = pollutant means we colour each point based on pollutant column. We add a + on the second last line of code as this so we can add components to ggplot() And finally we add geom_point() to specify what type of plot we want; in this case its a scatter plot. geoms are layers that combine data, aesthetic mappings, and other data to create a plot. There are other many other geoms. Go ahead and try geom_line(). For more examples see Visualizations in Section 3. ggplot() allows us to quickly create numerous plots of our data to aid our analysis. We can pass more than geoms to ggplot to improve our graphics. We can even stack geoms! ggplot(data = airPol, aes(x = pollutant, y = concentration, colour = pollutant)) + geom_boxplot() + geom_jitter() + labs(title = &quot;Toronto 60430 Air Quality Data&quot;, subtitle = &quot;from July 1st to July 8th, 2020&quot;, x = &quot;Airborn Pollutant&quot;, y = &quot;Concentration (ppm)&quot;, caption = &quot;Data from 2018 ECCC NAPS Hourly Data&quot;) + theme(legend.position = &quot;none&quot;) This plot looks more complicated then the previous one, but its the same data plotted slightly differently and with a few bells and whistles: We specified that the pollutant column would be the x-axis, i.e.Â the three pollutants. We kept the y-axis and colour the same. geom_boxplot() creates a box-plot summarizing the spread of our data. geom_jitter() is overlaid so we see all the individual points in our data set; this is useful to make sure stuff isnt found in clusters. Annotated the plot using labs() including title, subtitle, x- and y-axis, and a caption. Useful for publications. Made some final aesthetic changes using theme() specifically we removed the legend using legend.position = \"none\". This covers the basics of ggplot() but theres scores more you can do with this functions, and its extended even further with packages. All of this is discussed in more detail in the Visualizations chapter. 3.5.2 Calling specific functions Weve called functions like ggplot() and read_csv from the ggplot2 and readr packages, respectively, because they were implicitly imported when we called library(tidyverse). What library does is import all of the functions within a package into the R workspace, so we can simply refer to them by name later on. Sometimes youll want to be explicit with which function you call, as you can run into conflicts where different functions from different packages have the same name. Or you might not want to import the entire package when you only need to call one function. Either way, to explicitly call a function from a specific package you type the package name, followed by ::, and the function name. I.e. We can use read_csv without importing the tidyverse/readr packages by simply typing: readr::read_csv(). Note the package still needs to be installed on your computer for this to work. 3.5.3 Function Documentation An oft unappreciated aspect of packages is that they not only contain functions we can use, but documentation. Documentation provides a description of the function (what it does), what arguments it takes, details, and working examples.Often the easiest way to learn how to use a function is to take a working example and change it bit by bit to see how it works etc. To see documentation check the help tab in the outputs window or type a question mark in front of a functions name: # Takes you to the help document for the ggplot function ?ggplot You can also write youre own functions. Please see Programming with R for additional details. 3.6 Summary In this chapter weve covered: The basics of coding in R including variables, data types, and data structures (notable data.frames). How to install r packages and make use of functions Importing data from your project folder into R Preliminary exploration of ggplot2 to visualize the aforementioned data. Now that youre familiar with navigating RStudio and some basic coding building blocks, you may have realized that working the console can get real messy, real quick. Well read on to the next chapter where well discuss R workflows to make everyones lives easier. "],["workflows-for-r-coding.html", "Chapter 4 Workflows for R coding 4.1 Creating or opening a script 4.2 Workspace and whats real 4.3 Saving R scripts 4.4 Script formatting 4.5 Viewing data and code simultaneously 4.6 Troubleshooting error messages 4.7 Summary", " Chapter 4 Workflows for R coding In the previous chapter we did our coding in the console, which got messy rather quickly. To combat this, we code in scripts. Scripts are essentially a recipe that R reads to execute instead of you typing and running each line of code. And like a recipe, R reads your script from top to bottom. An important aspect of scripts is that theyre reproducible. In other words you should be able to rerun your script and get the exact same result every time. So lets go ahead and open a script. 4.1 Creating or opening a script To create a script: Go to File -&gt; New File -&gt; R Script Then save your script by going to File -&gt; Save As.... a. Make sure to save your file with the .R suffix. b. Save your script in your project folder, otherwise youll run into issues. Weve also provided an example script in the R4EnvChem project template. Assuming youre currently in the template project you can open the script as follows: Go to File -&gt; Open File -&gt; open the Rscript-example.R file. To run code, highlight the lines you wish to run and click Run` at the top of the script. Selecting all of the script will run every line. 4.2 Workspace and whats real Weve already mentioned the environment pane that displays objects present in your R session. While they are useful to work with, theyre not real. That is to say, if you closed your R session, those objects would be lost. And while RStudio allows you to save a working environment (and its associated objects), its best to embrace that only your scripts are real. You cant readily share your working environment, and even so its bad practice as you may be reference a previous iteration of an object giving you erroneous results. Think back to the chemistry lab where although you may jot notes down on loose leaf, only whats written in your lab book is considered real well thats how its supposed to work anyways. The idea is everything you need can be generated from the original data and the instructions in your script Anyone should be able to take your data and your code and get the same results you got. This is paramount for reproducibility of your work and your results. 4.3 Saving R scripts You can save an R script to a .r file by going to File-&gt;Save or by clicking the save button in the top left of your script. Code saved to a .r file is considered real. Variables, plots, or data sets that only exist in your work-space (shown in the Environment window) are not. Whenever you close RStudio, any objects in R that are not considered real will be lost in that R session. Furthermore when you need to share your code (for school or publication) youll need to share your data and your script, but never your work-space. This is to increase predictability and helps people (and you) to make sure your work is reproducible, an under appreciate hallmark of science. 4.3.1 What should I save? At this point in the chapter, two things should be clear: R scripts saved to .R files are real. Objects in your work-space/environment are not real, and will not be available to you after you close and re-open RStudio unless you re-run the code used to generate the work-space. So what is important to save in R, and how often should you save these files? It is paramount that you save the scripts you code in, and that you save them regularly. Even if youve made small notation changes to the code, it is always a good idea to save your changes to the script before closing RStudio, as there is a good chance you will not remember the minor differences upon returning. You want to make sure that even if you lose an object in your environment, your script still contains the code you used to generate that object. You also want to make sure that you generate the object before you call it in part of another command, so that when you run your scripts from top-to-bottom, the variables are generated in the work-space before they are referenced by later commands. 4.3.2 Saving objects In some cases, your code may be used to generate large data structures which require quite a bit of input to create. It can be quite tedious to re-run the code used to generate these large data sets every time you open RStudio, and you might find yourself wanting to save the data structure to a real file that you can simply import the next time you open the application. Most often this will be an intermediate step of your data analysis in the form of a data frame. To save a data frame as a .csv file you use write.csv(). # dummy data frame to save df &lt;- data.frame(x = c(1,2,3), y = c(&quot;yes&quot;, &quot;no&quot;, &quot;maybe&quot;)) write.csv(x = df, file = &quot;testData.csv&quot;) Breaking it down: we created a dummy data frame df we called write.csv() and x = df specifies we want to save the data.frame df file = \"data/testData.csv\" specifies where we want the file to save (in the data sub-directory, more later), and what our file will be called (testData.csv). Its important to specify the file extension so R knows how to save it. 4.4 Script formatting You should now be familiar with how to open the Scripts window, as well as some of the advantages of typing your code into this window rather than into the console directly. Before you write your first script, lets review some basic script formatting. Before you enter any code into your script, it is good practice to fill the first few lines with text comments which indicate the scripts title, author, and creation or last edit date. You can create a comment in a script by typing # before your text. An example is given below. #Title: Ozone time series script #Author: Georgia Green #Date: January 8, 2072 Below your script header, you should include any packages that need to be loaded for the script to run. Including the necessary packages at the top of the script allows you, and anyone you share your code with, to easily see what packages they need to install. This also means that if you decide to run an entire script at once, the necessary packages will always be loaded before any subsequent code that requires those packages to work. The first few lines of your scripts should look something like the following. # Title: Example R Script for Visualizing Air Quality Data # Author: John Guy Rubberboots # Date: 24 June 2021 # 1. Packages ---- # Install and open tidyverse if you haven&#39;t already #install.packages(&quot;tidyverse&quot;) library(tidyverse) The rest of your script should be dedicated to executable code. It is good practice to include text comments throughout the script, in between different chunks of code, to remind yourself what the different sections of code are for (i.e., #import packages in the above example). This also makes it easy for anyone you share your code with to understand what youre trying to do with different sections within the script. You can also use headers and sub-headers in your scripts using #, ##, and ### before your text and --- after as shown below: # Section ---- ## Subsection ---- ### Sub-subsection ---- Headings and subheadings are picked up by RStudio and displayed in the Document Outline box. You can open the Document Outline box by clicking the button highlighted in the image below. Use of these headings allows easy navigation of long scripts, as you can navigate between sections using the Document Outline box. Example script headings, document outlines, and comments. Note the  which specifies a comment is a header. 4.5 Viewing data and code simultaneously Before we get into more about coding and workflows, you may want to know how to view your scripts and data side-by-side. You can open a script, plot, or data set in a new window by clicking and dragging the tab in RStudio (may not be compatible with Mac), or by clicking the button highlighted in the image below. How to open an R script/plot/data set in a new window. Now that youre familiar with navigating RStudio and some basic coding building blocks, lets move over to Chapter 3, where well review a normal workflow in R. 4.6 Troubleshooting error messages In the previous section, you were introduced to your first error message in R, and we briefly discussed how to resolve the issue. As you become more familiar with R and start using more complex functions, you will become better acquainted with error messages in R, and how to deal with them accordingly. Well go through a few examples of error messages in the following sections, as well as how to read the errors, and how to fix your code to resolve the issues. 4.6.1 Script diagnostics When writing code in the Script window, RStudio will highlight any syntax errors in your code with a red squiggly line and an x in the side bar, as shown below. You can hover over the x to see what is causing the error. Figure 3.8: RStudio highlights syntax errors in the Scripts window. In the above message, R is telling you that it is not sure what to do with b. As mentioned previously, variable assignment is done in the format name &lt;- assignment. However, in the above example, the variable assignment statement is written as name name &lt;- assignment. Since variable names cannot contain spaces, R reads a b as two separate input variable names, not as a single string. If you wanted to assign a value of 0 to both a and b, you would need to write the statement once per variable, as shown below. a &lt;- 0 b &lt;- 0 Lets look at another example. Some functions require you to write code with nested parentheses. A good example would be the aes() argument that is called inside of ggplot(), as shown below. #plot ozone concentration vs. time ggplot(data = airPol, aes(x = date.time, y = concentration, colour = pollutant)) + geom_point() (For more detail about importing and using ggplot2, please re-visit Chapter 2, section 2.3.4, or see Chapter 11.) If you were to forget one of the parentheses in the previous line of code, RStudio would highlight it similar to below: Figure 3.9: RStudio highlights unmatched parentheses in the script window. Here R is telling you that you have an unmatched opening bracket. To resolve the error, simply add a closing bracket to match. The expected ',' after expression is a common error that you will see accompanying unmatched opening brackets. Sometimes you might get this error in the console after running code that is missing a bracket somewhere. It is good practice to check your parentheses a few times before running your code to make sure that all the commands are closed, and that R doesnt keep waiting for you to continue inputting code after youve click Run. If you notice that the &gt; in your R console has turned into a +, this is likely because youve just run a command that is missing a closing bracket, and thus, R is not aware that your code is finished. Simply input a closing bracket into the console, and the &gt; should return. 4.6.2 Reading error codes While the script window is very useful for pointing out syntax errors in your code, there are many other errors that can arise in RStudio which the script window is not able to capture. These are generally errors that arise from trying to execute your code, rather than from mistakes in your syntax. The following is a prime example of such an error. q &lt;- 8 + &quot;hi&quot; ## Error in 8 + &quot;hi&quot;: non-numeric argument to binary operator Here we are trying to add a numeric value (8) to a character string (hi), then set the sum of the two to variable q. R has given us an error in return, because there is no logical way for R to add a numeric value to non-numeric text. The error indicates that we have passed a non-numeric argument to binary operator, meaning we have used a non-numeric data type for an expression which is exclusively reserved for numeric data. If you try to add, divide or multiply two character strings using arithmetic operations in the console, you will get the same error. &quot;hey&quot; * &quot;hi&quot; ## Error in &quot;hey&quot; * &quot;hi&quot;: non-numeric argument to binary operator It is important to be aware of these error codes as many functions require specific data types as their inputs. You can always look at the required data type by looking at the documentation for the function (generally, this can be viewed by typing ?function into the console, where function is the name of the function). If the function requires numeric data, inputting character strings or logical values will throw the errors shown above. If the function requires logical values, inputting numeric data or character strings will throw the errors shown above. In order to avoid these errors, make sure that you are using the right type of data in your functions. You can always check your data type using class(). Some examples are shown below. class(&quot;hi&quot;) ## [1] &quot;character&quot; class(10) ## [1] &quot;numeric&quot; class(1L) ## [1] &quot;integer&quot; class(TRUE) ## [1] &quot;logical&quot; 4.7 Summary In this chapter weve covered: R workflows in the context of projects and scripts Whats considered real when working in RStudio How to format your script for legibility (Remember youre the one whos going to be stuck rereading it!) Troubleshooting some common error messages Now that youre familiar the above, well introduce RMarkdown, a way to combine your R code, its outputs, and your writing all in one dynamic document (like your lab reports!). "],["using-r-markdown.html", "Chapter 5 Using R Markdown 5.1 Deeper look into rmarkdown 5.2 Getting started with rmarkdown 5.3 So now what do I do with R Markdown? 5.4 RStudio tips and tricks", " Chapter 5 Using R Markdown In a nutshell, R Markdown allows you to analyse your data with R and write your report in the same place (this entire book was written with rmarkdown). This has loads of benefits including a reproducible workflow, and streamlined thinking. No more flipping back and forth between coding and writing to figure out whats going on. Lets run some simple code as an example: # Look at me go mom x &lt;- 2+2 x ## [1] 4 What weve done here is write a snippet of R code, ran it, and printed the results (as they would appear in the console). While the above code isnt anything special, we can extend this concept so that our R markdown document contains any data, figures or plots we generate throughout our analysis in R. Pretty neat, eh? You might not think so, but lets imagine a scenario youll encounter soon enough. Youre about to submit your assignment, youve spent hours analyzing your data and beautifying your plots. Everything is good to go until you notice at the last minute you were supposed to subtract value x and not value y in your analysis. If you did all your work in Excel (tsk tsk), youll need to find the correct worksheet, apply the changes, reformat your plots, and import them into word (assuming everything is going well, which is never does with looming deadlines). Now if you did all your work in R markdown, you go to your one .rmd document, briefly apply the changes and re-compile your document. 5.1 Deeper look into rmarkdown What weve done here is write a snippet of R code, ran it, and printed the results (as they would appear in the console). While the above code isnt anything special, we can extend this concept so that our R markdown document contains any data, figures or plots we generate throughout our analysis in R. For example: library(tidyverse) library(knitr) airPol &lt;- read_csv(&quot;data/2018-01-01_60430_Toronto_ON.csv&quot;) ggplot(data = airPol, aes(x = date.time, y = concentration, colour = pollutant)) + geom_line() + theme_classic() Figure 5.1: Time series of 2018 ambient atmospheric O3, NO2, and SO2 concentrations (ppb) in downtown Toronto sumAirPol &lt;- airPol %&gt;% drop_na() %&gt;% group_by(city, naps, pollutant) %&gt;% summarize(mean = mean(concentration), sd = sd(concentration), min = min(concentration), max = max(concentration)) knitr::kable(sumAirPol, digits = 1) city naps pollutant mean sd min max Toronto 60430 NO2 20.5 11.5 7 55 Toronto 60430 O3 19.7 8.7 1 33 Toronto 60430 SO2 1.1 0.3 1 3 Pretty neat, eh? You might not think so, but lets imagine a scenario youll encounter soon enough. Youre about to submit your assignment, youve spent hours analyzing your data and beautifying your plots. Everything is good to go until you notice at the last minute you were supposed to subtract value x and not value y in your analysis. If you did all your work in Excel (tsk tsk), youll need to find the correct worksheet, apply the changes, reformat your plots, and import them into word (assuming everything is going well, which is never does with looming deadlines). Now if you did all your work in R markdown, you go to your one .rmd document, briefly apply the changes and re-compile your document. 5.2 Getting started with rmarkdown As youve already guessed, R markdown documents use R and are most easily written and assembled in the R Studio IDE. If you have not done so, revisit Chapter 1:Installing R. Once setup with R and R Studio, youll need to install the rmarkdown and tinytex packages. In the console, simply run the following code: # These are large packages so it&#39;ll take a couple of minutes to install install.packages(&quot;rmarkdown&quot;) # downloaded from CRAN install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # install TinyTeX The rmarkdown package is what well use to generate our documents, and the tinytex package enables compiling documents as PDFs. Theres a lot more going on behind the scenes, but you shouldnt need to worry about it. Now that everything is setup, you can create your first R Markdown document by opening up R Studio, selecting FILE -&gt; NEW FILE -&gt; Rmarkdown. A dialog box will appear asking for some basic input parameters for your R markdown document. Add your title and select PDF as your default output format (you can always change these later if you want). A new file should appear thats already populated with some basic script illustrating the key components of an R markdown document. 5.2.1 Understanding rmarkdown Your first reaction when you opened your newly created R markdown document is probably that it doesnt look anything at all like something youd show your prof. Youre right, what youre seeing is the plain text code which needs to be compiled (called knit in R Studio) to create the final document. When you create a R markdown document like this in R Studio a bunch of example code is already written. You can compile this document (see below) to see what it looks like, but lets break down the primary components. At the top of the document youll see something that looks like this: --- title: &quot;Temporal Analysis of Foot Impacts While Birling Down the White Water&quot; author: &quot;Jean Guy Rubberboots&quot; date: &quot;24/06/2021&quot; output: pdf_document --- This section is known as the preamble and its where you specify most of the document parameters. In the example we can see that the document title is Temporal Analysis of Foot Impacts While Birling Down the White Water, its written by Jean Guy Rubberboots, on the 24th of June, and the default output is a PDF document. You can modify the preamble to suit your needs. For example, if you wanted to change the title you would write title: \"Your Title Here\" in the preamble. Note that none of this is R code, rather its YAML, the syntax for the documents metadata. Apart from whats shown you shouldnt need to worry about this much, just remember that indentation in YAML matters. Reading further down the default R markdown code, youll see different blocks of text. In R markdown anything you write will be interpreted as body text (i.e.Â stuff like this that you want folks to read) in the knitted document. To actually run R code youll need to see the next section. 5.2.2 Running code in rmarkdown Theres two ways to write R code in markdown: Setup a code chunk. Code chunks start with three back-ticks like this: ```{r}, where r indicates youre using the R language You end a code chunk using three more backticks like this ```. Specify code chunks options in the curly braces. i.e.Â ```{r, fig.height = 2} sets figure height to 2 inches. See the Code Chunk Options section below for more details. Inline code expression, which starts with `r and ends with ` in the body text. Earlier we calculated x &lt;- 2 + 2, we can use inline expressions to recall that value (ex. We found that x is 4) A screenshot of how this document, the one youre reading, appeared in R Studio is shown in the image below. To actually run your R code you have two options. The first is to run the individual chunks using the Run current chunk button (See figure 2). This is a great way to tinker with your code before you compile your document. The second option is to compile your entire document using the Knit document button (see Figure 2). Knitting will sequentially run all of your code chunks, generate all the text, knit the two together and output a PDF. Youll basically save this for the end. Note all the code chunks in a single markdown document work together like a normal R script. That is if you assign a value to a variable in the first chunk, you can call this variable in the second chunk; the same applies for libraries. Also note that every time you compile a markdown document, its done in a fresh R session. If youre calling a variable that exist in your working environment, but isnt explicitly created in the markdown document youll get an error. How this document, the one youre reading, appeared in RStudio; to see the final results scroll up to Figure 1. Note the knit and run current chunk buttons. 5.2.3 Generating final report To create a PDF to hand in youll need to compile, or knit, your entire markdown document as mentioned above. To knit (or compile) your R markdown script, simply click the knit button in R Studio (yellow box, Figure 2). You can specify what output you would like and R Studio will (hopefully) compile your script. If you want to test how your code chunks will run, R Studio shows a little green play button on the top right of every code chunk. this is the run current chunk button, and clicking it will run your code chunk and output whatever it would in the final R markdown document. This is a great way to tweak figures and codes as it avoids the need to compile the entire document to check if you managed to change the lines from black to blue in your plot. 5.3 So now what do I do with R Markdown? You do science and you write it down! In all seriousness though, this document was only meant to introduce you to R markdown, and to make the case that you should use it for your coursework. A couple of the most useful elements are talked about below, and there is a wealth of helpful resources for formatting your documents. Just remember to keep it simple, theres no need to reinvent the wheel. The default R markdown outputs are plenty fine with us. 5.3.1 R Markdown resources and further reading Theres a plethora of helpful online resources to help hone your R markdown skills. Well list a couple below (the titles are links to the corresponding document): Chapter 2 of the R Markdown: The Definitive Guide by Xie, Allair &amp; Grolemund (2020). This is the simplest, most comprehensive, guide to learning R markdown and its available freely online. The R markdown cheat sheet, a great resource with the most common R markdown operations; keep on hand for quick referencing. Bookdown: Authoring Books and Technical Documents with R Markdown (2020) by Yihui Xie. Explains the bookdown package which greatly expands the capabilities of R markdown. For example, the table of contents of this document is created with bookdown. 5.3.2 R code chunk options Your R code is run in chunks and the results will be embedded in the final output file. To each chunk you can specify options thatll effect how youre code chunk is run and displayed in the final output document. You include options in the chunk delimiters ```{r} and ```. For example the following code tells markdown youre running code written in R, that when you compile your document this code chunk should be evaluated, and that the resulting figure should have the caption Some Caption. ```{r, eval = FALSE, fig.cap = &quot;Some caption&quot;} # some code to generate a plot worth captioning. ``` The most common and useful chunk options are shown below. Note that they all have a default value. For example, eval tells R markdown whether the code within the block should be run. Its default option is TRUE, so by default any code in a chunk will be run when you knit your document. If you dont want that code to be run, but still displayed, you would set eval = FALSE. Another example would be setting echo = FALSE which allows the code to run, but the code wont be displayed on the output document (the outputs will still be displayed though); useful for creating clean documents with plots only (i.e.Â lab reports). option default effect eval TRUE whether to evaluate the code and include the results echo TRUE whether to display the code along with its results warning TRUE whether to display warnings error FALSE whether to display errors message TRUE whether to display messages tidy FALSE whether to reformat code in a tidy way when displaying it fig.width 7 width in inches for plots created in chunk fig.height 7 height in inches for plots created in chunk fig.cap NA include figure caption, must be in quotation makrs (\"\") 5.3.3 Inserting images Images not produced by R code can easily be inserted into your document. The markdown code isnt R code, so between paragraphs of bodytext insert the following code. Note that compiling to PDF, the LaTeX call will place your image in the optimal location, so you might find your image isnt exactly where you though it would be. A quick google search can help you out if this is problem. ![Caption for the picture.](path/to/image.png){width=50%, height=50%} Note that in the above the use of image atributes, the {width=50%, height=50%} at the end. This is how youll adjust the size of your image. Other dimensions you can use include px, cm, mm, in, inch, and %. 5.3.4 Generating Tables Theres multiple methods to create tables in R markdown. Assuming you want to display results calculated through R code, you can use the kable() function. Please consult Chapter 10 of the R Markdown Cookbook for additional support. Alternatively, if you want to create simple tables manually use the following code in the main body, outside of an R code chunk. You can increase the number of rows/columns and the location of the horizontal lines. To generate more complex tables, see the kable() function and the kableExtra package. Header 1 | Header 2| Header 3 ---------|---------|---------| Row 1 | Data | Some other Data Row 2 | Data | Some other Data ---------|---------|---------| Header 1 Header 2 Header 3 Row 1 Data Some other Data Row 2 Data Some other Data 5.3.5 Spellcheck in R Markdown While writing an R markdown document in R studio, go to the Edit tab at the top of the window and select Check Spelling. You can also use the F7 key as a shortcut. The spell checker will literally go through every word it thinks youve misspelled in your document. You can add words to it so your spell checkers utility grows as you use it. Note that the spell check with also check your R code; be wary of changing words in your code chunks because you may get an error down the line. 5.3.6 R markdown syntax Unlike Microsoft Word, RMarkdown utilizes a specific syntax for text formatting. Once you get used to it, it makes typing documents much easier than Words approach. The table below is how some of the most common text formatting is typed in your Rmarkdown document (syntax &amp; example column) and how itll appear in the final output. Text formatting syntax Example Example output italics *text* this is *italics* this is italics bold **text** this is **bold** this is bold subscript ~text~ this is ~subscript~ this is subscript superscript ^text^ this is ^superscript^ this is superscript monospace `text` this is `monospaced` this is monospace For a collection of other RMarkdown syntax, please see the useful (and brief) list compiled online here. This includes ordered and unordered lists, headers, code blocks, hyperlinks, and figure captions. 5.4 RStudio tips and tricks To further the usefulness of rmarkdown, the latest release of RStudio has a Visual R Markdown editor which introduces many useful features for authoring documents in rmarkdown. Some of the most pertinent are: Visual editor so you can see how your document looks (top left of script pane) Combining Zotero and RStudio for easy citatiosn of your document (read more here Spell check either via F7 or Edit -&gt; Check Spelling "],["r-tutorial-exercise.html", "Chapter 6 R Tutorial Exercise 6.1 Expected outcome", " Chapter 6 R Tutorial Exercise With the information presented in Section 1 you have the skills to start your data analysis. Weve created a brief tutorial that covers the major elements introduced. At the end of this tutorial youll have visualized a small subset of real Environment and Climate Change Canada (ECCC) National Airborne Pollution Surveillance Program (NAPS) data. More importantly, youll have a properly setup project with working code and rmarkdown documents that you can recycle and re-purpose for your upcoming course work. After all, a beautiful aspect of coding is recycling it in future work to save you hassle. In brief, the tutorial tasks are: Copy the template project from the GitHub repository here; there are instructions on downloading on the repos README. This is the same repo mentioned in R Studio Projects, you may have already downloaded it, if so proceed to the next step. Install the following packages if you havent already, you can copy the code below and run it in the console: tidyverse rmarkdown tinytex: needed to generate PDF files, more info here install.packages(&quot;tidyverse&quot;) install.packages(&quot;rmarkdown&quot;) install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # This will take ~5 mins, so grab a coffee Follow the instructions written in the template PDF to modify the rmarkdown file to analyze a dataset of your choice. 6.1 Expected outcome Theres a lot of upfront work with this tutorial, but if youve completed it successfully and generated your own markdown file analyzing your select dataset youll be well on your way to tackling the upcoming course labs/work as youll have: Created a working RStudio project, which you can copy and reuse for your future projects. Working rmarkdown document, similar to the reports youd hand in during class. Working R code showcasing basics of ggplot. "],["intro-to-data-analysis.html", "Chapter 7 Intro to Data Analysis 7.1 Example Data 7.2 Further Reading", " Chapter 7 Intro to Data Analysis This section will teach you how to use R to meet your data analysis needs using a common workflow. Whether it takes 10 minutes or 10 hrs, youll use this workflow for every data analysis project. By explicitly understanding the workflow steps, and how to execute them in R, youll be more than capable of expanding the limited tools learned from this book to any number of data analysis projects youll soon encounter. The explicit workflow well be teaching was originally described by Wickham and Grolemund, and consists of six key steps: Data science workflow describes by Wickham and Grolemund; image from R for Data Science, Wickham and Grolemund (2021) Import is the first step and consist of getting your data into R. Seems obvious, but doing it correctly will save you time and headaches down the line. Tidy refers to organizing your data in a tidy manner where each variable is a column, and each observation a row. This is often the least intuitive part about working with R, especially if youve only used Excel, but its critical. If you dont tidy your data, youll be fighting it every step of the way. Transform is anything you do to your data including any mathematical operations or narrowing in on a set of observations. Its often the first stage of the cycle as youll need to transform your data in some manner to obtain a desired plot. Visualize is any of the plots/graphics youll generate with R. Take advantage of R and plot often, its the easiest way to spot an errors. Model is an extension of mathematical operations to help understand your data. The linear regressions needed for a calibration curve are an example of a model. Communicate is the final step and is where you share the knowledge youve squeezed out of the information in the original data. The Transform, Visualize, and Model cycle exists because these steps often feed into one another. For example, youll often transform your data, make a quick model, then visualize it to see how it performs. Other times, youll visualize your data to see what type of model can explain it, and if any transformations are necessary. This is the beauty of R (and coding in general). Once youve setup everything, these steps are fairly simple to execute allowing you to quickly explore your data from a number of different angles. The next section will explore the theory (the why) behind these steps, and introduce some tools you can use to better explore your data. 7.1 Example Data Throughout this section and the next well be making use of a couple of example datasets. These datasets are all availabe in the data subfolder of the R4EnvChem Project Template. If you havent already, you can download them from the repo here 7.2 Further Reading In case it hasnt been apparent enough, this entire endeavour was inspired by the R for Data Science reference book by Hadley Wickham and Garrett Grolemund. Every step described above is explored in more detail in their book, which can be read freely online at https://r4ds.had.co.nz/. We strongly encourage you to read through the book to supplement your R data analysis skills. "],["importing-data-into-r.html", "Chapter 8 Importing data into R 8.1 How data is stored 8.2 read_csv 8.3 Importing other data types 8.4 Saving data 8.5 Further Reading", " Chapter 8 Importing data into R Unlike Excel, you cant copy and paste your data into R (or RStudio). Instead you need to import your data into R so you can work with it. This chapter will discuss how your data is stored, and how to import it into R (with some accompanying nuances). 8.1 How data is stored While there are a myriad of ways data is stored, notably raw instrument often record results in a proprietary vendor format, the data youre likely to encounter in an undergraduate lab will be in the form of a .csv or comma-separated values file. As the name implies, values are separated by commas (go ahead and open any .csv file in any text editor to observe this). Essentially you can think of each line as a row and commas as separating values into columns, which is exactly how R and Excel handle .csv files. 8.2 read_csv Importing a .csv file into R simply requires the read.csv or the read_csv function from tidyverse. The first variable is the most important as its the file path. Recall that R, unless specified, uses relative referencing. So in the example below were importing the ATR_plastics.csv from the data sub-folder in our project by specifying \"data/ATR_plastics.csv\" and assigning it to the variable atr_plastics. Note the inclusion of the file extension. atr_plastics &lt;- read_csv(&quot;data/ATR_plastics.csv&quot;) ## ## -- Column specification -------------------------------------------------------- ## cols( ## wavenumber = col_double(), ## EPDM = col_double(), ## Polystyrene = col_double(), ## Polyethylene = col_double(), ## `Sample: Shopping bag` = col_double() ## ) A benefit of using read_csv is that it prints out the column specifications with each columns name (how youll reference it in code) and the column value type. Columns can have different data types, but a data type must be consistent within any given column. Having the columns specifications is a good way to ensure R is correctly reading your data. The most common data types are: int for integer values (-1,1, 2, 10, etc.) dbl for doubles or real numbers (-1.20, 0.0, 1.200, 1e7, etc.) chr for character vectors or strings (A, chemical, Howdy maam, etc.) note numbers can be encoded as strings, so while you might read 1 as a number, R treats it as a character, limiting how you can use this value. lgl for logical values, either TRUE or FALSE We can also quickly inspect either through the Environment pane in RStudio or quickly with the head() function. Note the column specifications under the column name. head(atr_plastics) ## # A tibble: 6 x 5 ## wavenumber EPDM Polystyrene Polyethylene `Sample: Shopping bag` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 550. 0.212 0.0746 0.000873 0.0236 ## 2 551. 0.212 0.0746 0.000834 0.0238 ## 3 551. 0.213 0.0745 0.000819 0.0239 ## 4 552. 0.213 0.0745 0.000825 0.0239 ## 5 552. 0.214 0.0745 0.000868 0.0240 ## 6 553. 0.214 0.0746 0.000949 0.0240 Note how the first line of the ATR_plastics.csv has been interpreted as columns names (or headers) by R. This is common practice, and gives you a handle by which you can manipulate your data. If you did not intend for R to interpret the first row as headers you can suppress this with the additional argument col_names = FALSE. head(read_csv(&quot;data/atr_plastics.csv&quot;, col_names = FALSE)) ## ## -- Column specification -------------------------------------------------------- ## cols( ## X1 = col_character(), ## X2 = col_character(), ## X3 = col_character(), ## X4 = col_character(), ## X5 = col_character() ## ) ## # A tibble: 6 x 5 ## X1 X2 X3 X4 X5 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 wavenumber EPDM Polystyrene Polyethylene Sample: Shopping bag ## 2 550.0952 0.2119556 0.07463058 0.000873196 0.02364882 ## 3 550.5773 0.2124079 0.07455246 0.000834192 0.02382648 ## 4 551.0594 0.2128818 0.07450471 0.000819447 0.02387163 ## 5 551.5415 0.2133267 0.07449704 0.000825491 0.02391921 ## 6 552.0236 0.2137241 0.07452058 0.000868397 0.02396947 Note in the example below that since the headers are now considered data, the entire column is interpreted as character values. This will happen if a single non-numeric character is introduced in the column, so beware of typos when recording data! If we wanted to skip rows (i.e.Â to avoid blank rows at the top of our .csv), we can use the skip = n to skip n rows: head(read_csv(&quot;data/atr_plastics.csv&quot;, col_names = FALSE, skip = 1)) ## ## -- Column specification -------------------------------------------------------- ## cols( ## X1 = col_double(), ## X2 = col_double(), ## X3 = col_double(), ## X4 = col_double(), ## X5 = col_double() ## ) ## # A tibble: 6 x 5 ## X1 X2 X3 X4 X5 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 550. 0.212 0.0746 0.000873 0.0236 ## 2 551. 0.212 0.0746 0.000834 0.0238 ## 3 551. 0.213 0.0745 0.000819 0.0239 ## 4 552. 0.213 0.0745 0.000825 0.0239 ## 5 552. 0.214 0.0745 0.000868 0.0240 ## 6 553. 0.214 0.0746 0.000949 0.0240 8.2.1 Tibbles vs.Â data frames Quick eyes will notice the first line outputted above is # A tibble: 6 x 5. tibbles are a variation of data.frames introduced in section one, but built specifically for the tidyverse family of packages. While data.frames and tibbles are often interchangeable, its important to be aware of the difference in case you do run into a rare conflict. In these situations you can readily transform a tibble into a data.frame by coercion with the as.data.frame() function, and vice-versa with the as_tibble() function. class(as.data.frame(atr_plastics)) ## [1] &quot;data.frame&quot; 8.3 Importing other data types There are other functions to import different types of tabular data which all function like read_csv, such as read_tsv for tab-separate value files (.tsv) and read_excel and read_xlsx from the readxl package to import Excel files. Note most Excel files have probably been formatted for legibility (i.e.Â merged columns), which can lead to errors when importing into R. If you plan on importing Excel files, its probably best to open them in Excel to remove any formatting, and then save as .csv for smoother importing into R. 8.4 Saving data As you progress with your analysis you may want to save intermediate or final datasets. This is readily accomplished using the write.csv (base R) or write_csv (tidyverse) functions. Similar rules apply to how we used read_csv, but now the second argument specifies the save location and file name, the first argument is which tibble/data.frame were saving. Note that R will not create a folder this way, so if youre saving to a sub-folder youll have to make sure it exists or create it yourself. write_csv(atr_plastics, &quot;data/ATRSaveExample.csv&quot;) A benefit of write_csv is that it will always save in UTF-8 encoding and ISO8601 time format. This standardization makes it easier to share your .csv files with collaborators/yourself. 8.5 Further Reading See Chapters 10 and 11 of R for Data Science for some more details on tibbles and read_csv. "],["tidying-your-data.html", "Chapter 9 Tidying your data 9.1 What is tidy data? 9.2 Tools to tidy your data 9.3 Tips for recording data 9.4 Further reading 9.5 Chapter References", " Chapter 9 Tidying your data You might not have explicitly thought about how you store your data, whether working in Excel or elsewhere. Data is data after all. But having your data organized in a systematic manner that is conducive to your goal is paramount for working not only with R, but all of your experimental data. This chapter will introduce the concept of tidy data, and some of the tools of the dplyr package to get there. Lastly well offer some tips for how you should record your data in the lab. A bit of foresight and consistency can eliminate hours of tedious work down the line. 9.1 What is tidy data? Tidy data has each variable in a column, and each observation in a row (Wickham 2014) This may seem obvious to you, but lets consider how data is often recorded in lab, as exemplified in Figure 9.1A. Here the instrument response of two chemicals (A and B) for two samples (blank and unknown) are recorded. Note how the samples are on each row and the chemical are columns. However, someone else may record the same data differently as shown in Figure 9.1B, with the samples occupying distinct columns, and the chemical rows. Either layout may work well, but analyzing both would require re-tooling your approach. This is where the concept of tidy data comes into play. By reclassifying our data into observations and variables we can restructure out data into a common format: the tidy format (Figure 9.1C). Figure 9.1: (A and B) The same data can be recorded in multiple formats. (C) The same data in the tidy format. Note how the tidy data typically has more rows, hence why its sometimes refered to as long data. In the tidy or long format, we reclassified out data into three variables (Sample, Chemical, and Reading). This makes the observations clearer as now we know we measured two chemicals (A and B) in two samples (blank and unknown) and weve explicitly declared the Reading variable for our measured instrument response, which was only implied in the original layouts. Moreover, we can read across a row to get the gist of one data point (i.e.Â Our blank has a reading of 0 for Chemical A). Again we havent changed any information, weve simply reorganized our data to be clearer, consistent, and compatible with the tidyverse suit of tools. This might seem pedantic now, but as you progress youll want to reuse code youve previously written. This is greatly facilitated by making every data set as consistently structured as possible, and the tidy format is an ideal starting place. 9.2 Tools to tidy your data Now one of the more laborious parts of data science is tidying your data. If you can follow the tips in the Tips for recording data section, but the truth is you often wont have control. To this end, the tidyverse offers several tools, notable dplyr (pronounces d-pliers), to help you get there. Lets revisit our spectroscopy data from the previous chapter: atr_plastics &lt;- read_csv(&quot;data/ATR_plastics.csv&quot;) # This just outputs a table you can explore within your browser DT::datatable(atr_plastics) As we can see this our ATR spectroscopy results of several plastics, as recorded for a CHM 317 lab, is structured similarly to the example in Figure 9.1A. The ATR absorbance spectra of the four plastics are recorded in separate columns. Again, this format makes intuitive sense when recording in the lab, and for working in Excel, but isnt the friendliest with R. In the example below we can only specify one y value for ggplot to plot. In our example its the absorbance spectrum of Polystyrene. However, if wanted to plot the other spectra for comparison, wed need to repeat our geom_point call. # Plotting Polystyrene absorbance spectra ggplot(data = atr_plastics, aes( x = wavenumber, y = Polystyrene)) + geom_point() # Plotting Polystyrene and Polyethylene absorbance spectra ggplot(data = atr_plastics, aes( x = wavenumber, y = Polystyrene)) + geom_point() + geom_point(data = atr_plastics, aes(x = wavenumber, y = Polyethylene)) 9.2.1 Making data longer While code above works, its not particularly handy and undermines much of the utility of ggplot because the data isnt tidy. Fortunately the pivot_longer function can easily restructure our data into the long format to work with ggplot. Lets demonstrate that: atr_long &lt;- atr_plastics %&gt;% pivot_longer(cols = -wavenumber, names_to = &quot;sample&quot;, values_to = &quot;absorbance&quot;) head(atr_long) ## # A tibble: 6 x 3 ## wavenumber sample absorbance ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 550. EPDM 0.212 ## 2 550. Polystyrene 0.0746 ## 3 550. Polyethylene 0.000873 ## 4 550. Sample: Shopping bag 0.0236 ## 5 551. EPDM 0.212 ## 6 551. Polystyrene 0.0746 Lets break down the code weve executed via the pivot_longer function: cols = -wavenumber specifies that were selecting every other column but wave number. we could have just as easily specified each column individually using cols = c(\"EPDM\",...) but its easier to use - to specify what we dont want to select. names_to = \"sample\" specifies that the column header (i.e.Â names) be converted into an observation under the sample column. values_to = \"absorbance\" specifies that the absorbance values under each of the selected headers be placed into the aborsbance column. Now that weve reclassified out data into the longer, we can exploit the explicitly introduced sample variable to easily plot all of our spectra: ggplot(data = atr_long, aes(x = wavenumber, y = absorbance, colour = sample) ) + geom_point() Well talk more about ggplot in the Visualizations chapter, but for now you can understand how our code could scale to accommodate any number of different samples, whereas the previous attempt would require an explicit call to each column. pivot_longer has many other features that you can take advantage of. We highly recommend reading the examples listed on the pivot_longer page to get a better sense of the possibilities. For example its common to record multiple observations in a single column header, i.e.Â Chemical_A_0_mM. We can exploit common naming conventions like this to easily split up these observations as shown below. head(example) ## wavelength_nm Chemical_A_0_mM Chemical_A_1_mM Chemical_B_0_mM Chemical_B_1_mM ## 1 488 0 1 2 NA ## 2 572 0 5 7 20 example_long &lt;- example %&gt;% pivot_longer( cols = starts_with(&quot;Chemical&quot;), names_prefix = &quot;Chemical_&quot;, names_to = c(&quot;Chemical&quot;, &quot;Concentration&quot;, &quot;Conc_Units&quot;), names_sep = &quot;_&quot;, values_to = &quot;Absorbance&quot;, values_drop_na = TRUE ) head(example_long) ## # A tibble: 6 x 5 ## wavelength_nm Chemical Concentration Conc_Units Absorbance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 488 A 0 mM 0 ## 2 488 A 1 mM 1 ## 3 488 B 0 mM 2 ## 4 572 A 0 mM 0 ## 5 572 A 1 mM 5 ## 6 572 B 0 mM 7 9.2.2 Making data wider Sometimes packages or circumstances will require you reformat your data into a matrix or wide format (notable the matrixStats and matrixTests packages). You can accomplish this using the pivot_wider function, which operates inverse to the pivot_longer function described above. For example the input names_from is used to specify which variables are to be converted to headers. You can read up on the pivot_wider function here 9.2.3 Seperating columns Sometimes your data has already been recorded in a tidy-ish fashion, but there may be multiple observations recorded under one apparent variable, something like 1 mM for concentration. As it stands we cannot easily access the numerical value in the concentration recording because R will encode this as a string due to the mM. We can separate data like this using the seperate function, which operates similarly to how pivot_longer breaks up headers. # Example with multiple encoded observations sep_example ## sample reading ## 1 Toronto_O3_1 10 ## 2 Toronto_O3_2 22 ## 3 Toronto_NO2_1 30 The example above is something youll come across in the lab, most often with the sample names youll pass along to your TA. Youve crammed as much information as possible into that name so you and them know exactly whats being analyzed. In this example, the sample name contains the location (Toronto), the chemical measured (O3 or NO2) and the replicate number (i.e.Â 1). Using the seperate function we can split up these three observations so we can properly group our data later on in our analysis. # Separating observations sep_example %&gt;% separate( col = sample, into = c(&quot;location&quot;, &quot;chemical&quot;, &quot;replicateNum&quot;), sep = &quot;_&quot;, remove = TRUE, convert = TRUE) ## location chemical replicateNum reading ## 1 Toronto O3 1 10 ## 2 Toronto O3 2 22 ## 3 Toronto NO2 1 30 Again, lets break down what we did with the separate function: col = sample specifies were selecting the sample column into = c(...) specifies what columns were separating our name into. sep = \"_\"1 specifies that each element is separated by an underscore (_); you can use sep = \" \" if they were separated by spaces. remove = TRUE removes the original sample column, no need for duplication; setting this to FALSE would keep the original column. convert = TRUE converts the new columns to the appropriate data format. In the original column ,the replicate number is a character value because its part of a string, convert ensures that itll be converted to a numerical value. Again its paramount to be consistent when recording data. 9.2.4 Uniting/combining columns The opposite of the separate function is the unite function. Youll use it far less often, but you should be aware of it as it may come in handy. You can use it for combining strings together, or prettying up tables for publication/presentations. You can read more about the unite function here 9.2.5 Renaming columns/headers Sometimes a name is lengthy, or cumbersome to work with in R. While something like This_is_a_valid_header is valid and compatible with R and tidyverse functions, you may want to change it to make it easier to work with (i.e.Â less typing). Simply use the rename function: colnames(badHeader) ## [1] &quot;UVVis_Wave_Length_nM&quot; &quot;Absorbance&quot; colnames(rename(badHeader, wavelength_nM = UVVis_Wave_Length_nM)) ## [1] &quot;wavelength_nM&quot; &quot;Absorbance&quot; 9.2.6 Rounding numbers If you want to round the numbers in your data to account for significant figures or something, you can do so using the round function. head(example) ## measurement absorbance conc ## 1 A 123.123 1.100000 ## 2 B 300.000 3.000022 ## 3 C 175.547 1.750000 # rounding &#39;conc&#39; column to 1 decimal. example %&gt;% mutate_at(vars(conc), round, 1) ## measurement absorbance conc ## 1 A 123.123 1.1 ## 2 B 300.000 3.0 ## 3 C 175.547 1.8 9.3 Tips for recording data In case you havent picked up on it, tidying data in R is much easier if the data is recorded consistently. You cant always control how your data will look, but in the event that you can (i.e.Â your inputting the instrument readings into Excel on the bench top) here are some tips to make your life easier: Be consistent. If youre naming your samples make sure they all contain the same elements in the same order. The sample names Toronto_O3_1 and Toronto_O3_2 can easily be broken up as demonstrated in [Separating columns]; O3_Toronto_1, TorontoO32, and Toronto_1 cant be. Use as simple as possible headers. Often youll be pasting instrument readings into one .csv using Excel on whatever computer records the instrument readings. In these situations its often much easier to paste things in columns. Recall the capabilities of pivot_longer and how you can break up names as described in Making data longer. Chemical_A_1 and Chemical_B_2 are headers that are descriptive for your sample and can be easily pivoted into their own columns. Chemical A 1 ( I think?!) is a header isnt. Make sure data types are consistent within a column. This harks back to the Importing data into R chapter, but a single non-numeric character can cause R to misinterpret an entire column leading to headaches down the line. Save your data in UTF-8 format. Excel and other programs often allow you to export your data in a variety of .csv encodings, but this can affect how R reads when importing your data. Make sure you select UTF-8 encoding when exporting your data. 9.4 Further reading As always, the R for Data Science book goes into more detail on all of the elements discussed above. For the material covered here you may want to read Chapter 9: Tidy Data. 9.5 Chapter References "],["transform-dplyr-and-data-manipulation.html", "Chapter 10 Transform: dplyr and data manipulation 10.1 Selecting by row or value 10.2 Arranging rows 10.3 Selecting by column or variable 10.4 Adding new variables 10.5 Group and summarize data 10.6 The pipe: chaining functions together 10.7 Further reading", " Chapter 10 Transform: dplyr and data manipulation Transformation encompasses any steps you take to manipulate, reshape, refine, or transform your data. Weve already touched upon some useful transformation functions in previous example code snippets, such as the mutate function for adding columns. This section will explore some of the most useful functionailities of the dplyr package, explicitly introduce the pipe operator %&gt;%, and showcase how you can leverage these tools to quickly manipulate your data. The benchmark dplyr functions are : mutate() to create new columns/variables from existing data arrange() to reorder rows filter() to refine observations by their values (in other words by row) select() to pick variables by name (in other words by column) summarize to collapse many values down to a single summary. Well go through each of these functions, but we highly recommend you read Chapter 3: Data Transformation from R for Data Science to get a more comprehensive breakdown of these functions. Note that the information here is based on a tidyverse approach, but this is only one way of doing things. Please see the Further reading section for links to other equally suitable approaches to data transformation. Lets explore the functionality of dplyr using some flame absorption/emission spectroscopy (FAES) data from a CHM317 lab. This data represents the emission signal of five sodium (Na) standards measured in triplicate: # Importing using tips from Import chapter FAES &lt;- read_csv(file = &quot;data/FAESdata.csv&quot;) %&gt;% # see section on Pipe pivot_longer(cols = -std_Na_conc, names_to = &quot;replicate&quot;, names_prefix = &quot;reading_&quot;, values_to = &quot;signal&quot;) %&gt;% separate(col = std_Na_conc, into = c(&quot;type&quot;, &quot;conc_Na&quot;, &quot;units&quot;), sep = &quot; &quot;, convert = TRUE) DT::datatable(FAES) Note the use of convert = TRUE in the separate() call. This runs a type convert on new columns. If we didnt include this, the conc_Na column would be of type character because the numbers originated from a string. convert() ensures theyre converted to numeric. Always use convert = TRUE when you separate columns. 10.1 Selecting by row or value filter() allows up to subset our data based on observation (row) values. filter(FAES, conc_Na == 0) ## # A tibble: 3 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. ## 2 blank 0 mg/L 2 1304. ## 3 blank 0 mg/L 3 1396. Note how we need to pass logical operations to filter(). In the above code, we used filter() to get all rows where the concentration of sodium is equal to 0 (== 0). Note the presence of two equal signs (==). In R one equal sign (=) is used to pass an argument, two equal signs (==) is the logical operation is equal and is used to test equality (i.e.Â that both sides have the same value). A frequent mistake is to use = instead of == when testing for equality. 10.1.1 Logical oeprators filter() can use other relational and logical operators, or combinations thereof, to improve your sub-setting. Relational operators compare values and logical operators carry out Boolean operations (TRUE or FALSE). Logical operators are used to combine multiple relational operators lets just list what they are and how we can use them: Operator Type Description &gt; relational Less than &lt; relational Greater than &lt;= relational Less than or equal to &gt;= relational Greater than or equal to == relational Equal to != relational Not equal to &amp; logical AND ! logical NOT | logical OR is.na() function Checks for missing values, TRUE if NA Selecting all signals below a threshold value filter(FAES, signal &lt; 4450) ## # A tibble: 8 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. ## 2 blank 0 mg/L 2 1304. ## 3 blank 0 mg/L 3 1396. ## 4 standard 0.1 mg/L 1 2947. ## 5 standard 0.1 mg/L 2 2924. ## 6 standard 0.1 mg/L 3 2927. ## 7 standard 0.2 mg/L 1 4446. ## 8 standard 0.2 mg/L 3 4416. Selecting signals between values filter(FAES, signal &gt;= 4450 &amp; signal &lt; 8150) ## # A tibble: 6 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 standard 0.2 mg/L 2 4453. ## 2 standard 0.3 mg/L 1 6235. ## 3 standard 0.3 mg/L 2 6207. ## 4 standard 0.3 mg/L 3 6267. ## 5 standard 0.4 mg/L 2 8141. ## 6 standard 0.4 mg/L 3 8106. Selecting all other replicates other than replicate 2 filter(FAES, replicate != 2) ## # A tibble: 10 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. ## 2 blank 0 mg/L 3 1396. ## 3 standard 0.1 mg/L 1 2947. ## 4 standard 0.1 mg/L 3 2927. ## 5 standard 0.2 mg/L 1 4446. ## 6 standard 0.2 mg/L 3 4416. ## 7 standard 0.3 mg/L 1 6235. ## 8 standard 0.3 mg/L 3 6267. ## 9 standard 0.4 mg/L 1 8173. ## 10 standard 0.4 mg/L 3 8106. selecting the first standard replicate OR any of the blanks. filter(FAES, (type == &quot;standard&quot; &amp; replicate == 1) | (type == &quot;blank&quot;)) ## # A tibble: 7 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. ## 2 blank 0 mg/L 2 1304. ## 3 blank 0 mg/L 3 1396. ## 4 standard 0.1 mg/L 1 2947. ## 5 standard 0.2 mg/L 1 4446. ## 6 standard 0.3 mg/L 1 6235. ## 7 standard 0.4 mg/L 1 8173. removing any missing values (NA) using is.na(). Note there are no missing values in our data set so nothing will be removed, if we removed the NOT operator (!) we would have selected all rows with missing values. filter(FAES, !is.na(signal)) ## # A tibble: 15 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. ## 2 blank 0 mg/L 2 1304. ## 3 blank 0 mg/L 3 1396. ## 4 standard 0.1 mg/L 1 2947. ## 5 standard 0.1 mg/L 2 2924. ## 6 standard 0.1 mg/L 3 2927. ## 7 standard 0.2 mg/L 1 4446. ## 8 standard 0.2 mg/L 2 4453. ## 9 standard 0.2 mg/L 3 4416. ## 10 standard 0.3 mg/L 1 6235. ## 11 standard 0.3 mg/L 2 6207. ## 12 standard 0.3 mg/L 3 6267. ## 13 standard 0.4 mg/L 1 8173. ## 14 standard 0.4 mg/L 2 8141. ## 15 standard 0.4 mg/L 3 8106. These are just some examples, but you can combine the logical operators in any way that works for you. Likewise, there are multiple combinations that will yield the same result, its up to you do figure out which works best for you. 10.2 Arranging rows arrange() simple reorders the rows based on the value you passed to it. By default it arranges the specified values into ascending order. Lets arrange our signal in increasing by increasing order: arrange( FAES, signal) ## # A tibble: 15 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 2 1304. ## 2 blank 0 mg/L 1 1349. ## 3 blank 0 mg/L 3 1396. ## 4 standard 0.1 mg/L 2 2924. ## 5 standard 0.1 mg/L 3 2927. ## 6 standard 0.1 mg/L 1 2947. ## 7 standard 0.2 mg/L 3 4416. ## 8 standard 0.2 mg/L 1 4446. ## 9 standard 0.2 mg/L 2 4453. ## 10 standard 0.3 mg/L 2 6207. ## 11 standard 0.3 mg/L 1 6235. ## 12 standard 0.3 mg/L 3 6267. ## 13 standard 0.4 mg/L 3 8106. ## 14 standard 0.4 mg/L 2 8141. ## 15 standard 0.4 mg/L 1 8173. Since our original FAES data is already arranged by increasing cong_Na and replicate, lets inverse that order by arranging conc_Na into descending order using the desc() function BUT arrange the signal values in: # Note the order of precedence arrange(FAES, desc(conc_Na), signal) ## # A tibble: 15 x 5 ## type conc_Na units replicate signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 standard 0.4 mg/L 3 8106. ## 2 standard 0.4 mg/L 2 8141. ## 3 standard 0.4 mg/L 1 8173. ## 4 standard 0.3 mg/L 2 6207. ## 5 standard 0.3 mg/L 1 6235. ## 6 standard 0.3 mg/L 3 6267. ## 7 standard 0.2 mg/L 3 4416. ## 8 standard 0.2 mg/L 1 4446. ## 9 standard 0.2 mg/L 2 4453. ## 10 standard 0.1 mg/L 2 2924. ## 11 standard 0.1 mg/L 3 2927. ## 12 standard 0.1 mg/L 1 2947. ## 13 blank 0 mg/L 2 1304. ## 14 blank 0 mg/L 1 1349. ## 15 blank 0 mg/L 3 1396. Just note with arrange() that NA values will always be placed at the bottom, whether you use desc() or not. 10.3 Selecting by column or variable select() allows you to readily select columns by name. Note however that it will always return a tibble, even if you only select one variable/column. select(FAES, signal) ## # A tibble: 15 x 1 ## signal ## &lt;dbl&gt; ## 1 1349. ## 2 1304. ## 3 1396. ## 4 2947. ## 5 2924. ## 6 2927. ## 7 4446. ## 8 4453. ## 9 4416. ## 10 6235. ## 11 6207. ## 12 6267. ## 13 8173. ## 14 8141. ## 15 8106. You can also select multiple columns using the same helper functions describes in Importing data into R. select(FAES, conc_Na:replicate) ## # A tibble: 15 x 3 ## conc_Na units replicate ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0 mg/L 1 ## 2 0 mg/L 2 ## 3 0 mg/L 3 ## 4 0.1 mg/L 1 ## 5 0.1 mg/L 2 ## 6 0.1 mg/L 3 ## 7 0.2 mg/L 1 ## 8 0.2 mg/L 2 ## 9 0.2 mg/L 3 ## 10 0.3 mg/L 1 ## 11 0.3 mg/L 2 ## 12 0.3 mg/L 3 ## 13 0.4 mg/L 1 ## 14 0.4 mg/L 2 ## 15 0.4 mg/L 3 # Getting columns containing the character &quot;p&quot; select(FAES, contains(&quot;p&quot;)) ## # A tibble: 15 x 2 ## type replicate ## &lt;chr&gt; &lt;chr&gt; ## 1 blank 1 ## 2 blank 2 ## 3 blank 3 ## 4 standard 1 ## 5 standard 2 ## 6 standard 3 ## 7 standard 1 ## 8 standard 2 ## 9 standard 3 ## 10 standard 1 ## 11 standard 2 ## 12 standard 3 ## 13 standard 1 ## 14 standard 2 ## 15 standard 3 10.4 Adding new variables mutate() allows you to add new variable (read columns) to your existing data set. Itll probably be the workhorse function youll use during your data transformation as you can readily pass other functions and mathematical operators to it to transform your data. lets suppose that our standards were diluted by a factor of 10, we can add a new column for this: mutate(FAES, &quot;dil_fct&quot; = 10) ## # A tibble: 15 x 6 ## type conc_Na units replicate signal dil_fct ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. 10 ## 2 blank 0 mg/L 2 1304. 10 ## 3 blank 0 mg/L 3 1396. 10 ## 4 standard 0.1 mg/L 1 2947. 10 ## 5 standard 0.1 mg/L 2 2924. 10 ## 6 standard 0.1 mg/L 3 2927. 10 ## 7 standard 0.2 mg/L 1 4446. 10 ## 8 standard 0.2 mg/L 2 4453. 10 ## 9 standard 0.2 mg/L 3 4416. 10 ## 10 standard 0.3 mg/L 1 6235. 10 ## 11 standard 0.3 mg/L 2 6207. 10 ## 12 standard 0.3 mg/L 3 6267. 10 ## 13 standard 0.4 mg/L 1 8173. 10 ## 14 standard 0.4 mg/L 2 8141. 10 ## 15 standard 0.4 mg/L 3 8106. 10 We can also create multiple columns in the same mutate() call: mutate(FAES, &quot;dil_fct&quot; = 10, &quot;adj_signal&quot; = signal * dil_fct) ## # A tibble: 15 x 7 ## type conc_Na units replicate signal dil_fct adj_signal ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 blank 0 mg/L 1 1349. 10 13485. ## 2 blank 0 mg/L 2 1304. 10 13041. ## 3 blank 0 mg/L 3 1396. 10 13958. ## 4 standard 0.1 mg/L 1 2947. 10 29473. ## 5 standard 0.1 mg/L 2 2924. 10 29244. ## 6 standard 0.1 mg/L 3 2927. 10 29273. ## 7 standard 0.2 mg/L 1 4446. 10 44464. ## 8 standard 0.2 mg/L 2 4453. 10 44531. ## 9 standard 0.2 mg/L 3 4416. 10 44164. ## 10 standard 0.3 mg/L 1 6235. 10 62352. ## 11 standard 0.3 mg/L 2 6207. 10 62074. ## 12 standard 0.3 mg/L 3 6267. 10 62666. ## 13 standard 0.4 mg/L 1 8173. 10 81731. ## 14 standard 0.4 mg/L 2 8141. 10 81412. ## 15 standard 0.4 mg/L 3 8106. 10 81062. Couple of things to note: The variable were creating needs to be in quotation marks, hence \"dil_fct\" for our dilution factor variable the variables were referencing do not need to be in quotation marks; hence signal because this variable already exist. Note the order of precedence: dil_fct is created first so we can reference in the second argument, we would get an error if we swapped the order. 10.4.1 Useful mutate function There are a myriad of functions you can make use of with the mutate function. Here are some of the mathematical operators available in R: function. definition + additon - subtraction * multiplication / division ^ exponent; to the power off log() returns the specified base-log; see also log10() and log2() 10.5 Group and summarize data summarize effectively summarized your data based on functions youve passed to it. Looking at our FAES data wed probably want the mean of the triplicate signals, alongside the standard deviation. Lets see what happens when we apply the summarize function straight up: summarise(FAES, &quot;mean&quot; = mean(signal), &quot;stdDev&quot; = sd(signal)) ## # A tibble: 1 x 2 ## mean stdDev ## &lt;dbl&gt; &lt;dbl&gt; ## 1 4620. 2475. This doesnt look like what we wanted. What we got was the mean and standard deviation of all of the signals, regardless of the concentration of the standard. Also note how weve lost the other columns/variables and are only left with the mean and stdDev. This is all because we need to group our observations by a variable. We can do this by using the group_by() function. groupedFAES &lt;- group_by(FAES, type, conc_Na) summarise(groupedFAES, &quot;mean&quot; = mean(signal), &quot;stdDev&quot; = sd(signal)) ## `summarise()` has grouped output by &#39;type&#39;. You can override using the `.groups` argument. ## # A tibble: 5 x 4 ## # Groups: type [2] ## type conc_Na mean stdDev ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 blank 0 1349. 45.9 ## 2 standard 0.1 2933. 12.5 ## 3 standard 0.2 4439. 19.5 ## 4 standard 0.3 6236. 29.6 ## 5 standard 0.4 8140. 33.4 Here weve created a new data set, groupedFAES, that we grouped by the variables type and conc_Na so we could get the mean and standard deviation of each group. Note the multiple levels of grouping. For this data set we could have omitted the type variable, but in larger datasets you may have multiple groupings (i.e.Â from different location), so you can group by multiple variables to get smaller groups. 10.5.1 Useful summarize functions Weve used the mean() and sd() functions above, but there are a host of other useful functions you can use in conjunction with summarize. See Useful Functions in the summarise() documentation (enter ?summarise) in the console. 10.6 The pipe: chaining functions together With the tools presented here we could do a decent job analyzing our FAES data. Lets say we wanted to subtract the mean of the blank from each standard signal and then get summarize those results. It would look something like this: blank &lt;- filter(FAES, type == &quot;blank&quot;) meanBlank &lt;- summarize(blank, mean(signal)) meanBlank &lt;- as.numeric(meanBlank) paste(&quot;The mean signal from the blank triplicate is:&quot;, meanBlank) ## [1] &quot;The mean signal from the blank triplicate is: 1349.4489&quot; stds_1 &lt;- filter(FAES, type == &quot;standard&quot;) stds_2 &lt;- mutate(stds_1, &quot;cor_sig&quot; = signal - meanBlank) stds_3 &lt;- group_by(stds_2, conc_Na) stds_4 &lt;- summarize(stds_3, &quot;mean&quot; = mean(cor_sig), &quot;stdDev&quot; = sd(cor_sig)) stds_4 ## # A tibble: 4 x 3 ## conc_Na mean stdDev ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.1 1584. 12.5 ## 2 0.2 3089. 19.5 ## 3 0.3 4887. 29.6 ## 4 0.4 6791. 33.4 While the code above did its job, its certainly wasnt easy to type and certainly not easy to read. At every step of the way weve saved our updated data outputs to a new variable (stds_1, stds_2, etc.). However, most of these intermediates arent important, and moreover the repetitive names clutter our code. As the code above is written, weve had to pay special attending to the variable suffix to make sure were calling the correct data set as our code has progresses. An alternative would be to reassign the outputs back to the original variable name (i.e.Â stds_1 &lt;- mutate(stds_1, ...)), but that doesnt solve the issue of readability as theres still redundant assigning. A solution for this is the pipe operator %&gt;% ( pronounced then), an incredibly useful tool for writing more legible and understandable code. The pipe basically changes how you read code to emphasize the functions youre working with by passing the intermediate steps to hidden processes in the background. Re-writing the code above, wed get something like: meanBlank &lt;- FAES %&gt;% filter(type ==&quot;blank&quot;) %&gt;% summarise(mean(signal)) %&gt;% as.numeric() paste(&quot;The mean signal from the blank triplicate is:&quot;, meanBlank) ## [1] &quot;The mean signal from the blank triplicate is: 1349.4489&quot; Things may look a bit different, but our underlying code hasnt changed much. Whats happening is the pipe operator passes the output to the first argument of the next function. So the output of filter... is passed to the first argument of sumamrise..., and the argument we specified in summarise is actually the second argument it receives. Youre probably wondering how hiding stuff makes your code more legible, but think of %&gt;% as being equivalent to then. We can read our code as: Take the FAES dataset, then filter for type == \"blank\" then collapse the dataset to the mean signal value and then convert to numeric value then pass this final output to the new variable meanBlank. Not only is the pipe less typing, but the emphasis is on the functions so you can better understand what youre doing vs.Â where all the intermediates are going. Extending our piping to the second batch of code we get: stds &lt;- FAES %&gt;% filter(type == &quot;standard&quot;) %&gt;% mutate(&quot;cor_sig&quot; = signal - meanBlank) %&gt;% group_by(conc_Na) %&gt;% summarize(&quot;mean&quot; = mean(cor_sig), &quot;stdDev&quot; = sd(cor_sig)) stds ## # A tibble: 4 x 3 ## conc_Na mean stdDev ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.1 1584. 12.5 ## 2 0.2 3089. 19.5 ## 3 0.3 4887. 29.6 ## 4 0.4 6791. 33.4 Same thing. The underlying code hasnt changed much, but its much more legible and we can clearly see were subtracting the meanBlank value from each measured signal then summarizing the corrected signals. 10.6.1 Notes on piping The pipe is great and especially useful with tidyverse packages, but it does have some limitations: You cant easily extract intermediate steps. So youll need to break up your pipping chain to output any intermediate steps you can. The benefit of piping is legibility; this goes away as you increase the number of steps as you lose track of whats going on. Keep the piping short and thematically similar. Pipes are linear, if you have multiple inputs or outputs you should consider an alternative approach. 10.7 Further reading Chapter 5: Data Transformation of R for Data Science for a deeper breakdown of dplyr and its functionality. Chapter 18: Pipes of R for Data Science for more information on pipes. Syntax equivalents: base R vs Tidyverse by Hugo Taveres for a comparison of base-R solutions to tidyverse. This entire book is largely biased towards tidyverse solutions, but theres no denying that certain base-R can be more elegant. Check out this write up to get a better idea. "],["programming-with-r.html", "Chapter 11 Programming with R 11.1 Functions 11.2 Conditional arguments 11.3 When to use functions 11.4 Further Reading", " Chapter 11 Programming with R Programming is writing instructions that tell the computer what to do. Like most things, learning a little goes a long way. And like most things, its easy to lose the forest for the trees. Thats why we wont focus too much on programming (after all youre chemist not computer scientist) but we will introduce a few simple yet incredibly powerful elements of programming to help you along with your data science quest. Well point to several sources for further reading on functions at the end of this chapter. 11.1 Functions Functions allow you to write general purpose code to automate common tasks. Theyre a great way to decrease repetition and make your code more legible and reproducible. To crease a function in R you only need function(): funSum &lt;- function(x,y){ z &lt;- x + y paste(&quot;The sum of&quot;, x, &quot;+&quot;, y, &quot;is&quot;, z, sep =&quot; &quot;) } funSum(1, 3) ## [1] &quot;The sum of 1 + 3 is 4&quot; funSum(&quot;yes&quot;,3) ## Error in x + y: non-numeric argument to binary operator What weve done is create a function called funSum which takes two numeric inputs x and y, sums the two into z and paste an output telling us the sum. A couple of things to note: We need to explicitly state which arguments are function will take; in this example they are x and y. Whatever we pass to x or y will be carried into the function. We cant sum non-numeric values, so R returns an error in the second instance Functions create their own environment, therefore any variable created inside a function only exists inside the function. In the above example, x, y, and z only exist inside the function. R automatically returns whichever variable is on the last line of the body of the function; but you can explicitly ask for an output using return() Lets take a look at a more practical function, something that you might actually use. In mass spectrometry, a gauge of accuracy is the mass error, a measure of the difference between the observed and theoretical masses, and is reported in parts-per-million (ppm). The formula for calculating mass error is: \\[ Mass~error~(ppm) = \\frac{|mass_{theoretical} - mass_{experimental}|}{mass_{theorical}} \\times 10^6 \\] The formula is simple enough, but you may need to calculate any number of mass errors, so it behooves us to compose a quick formula to simplify our workload: ppmMS &lt;- function(theoMZ, expMZ){ ppm &lt;- abs(theoMZ - expMZ)/theoMZ * 1e6 ppm } # Theoretical mass = 1479.63 m/z # experimental mass = 1480.10 m/z ppmMS(theoMZ = 1479.63, expMZ = 1480.10) ## [1] 317.647 Pretty useful if youre manually checking something, but we can also use our functions into the pipe to help our data transformation: # Example data masses &lt;- data.frame(&quot;theo&quot; = c(1479.63, 1479.63, 1479.63), &quot;exp&quot; = c(1478.63, 1479.63, 1480.10)) masses %&gt;% mutate(massError = ppmMS(theo, exp)) ## theo exp massError ## 1 1479.63 1478.63 675.8446 ## 2 1479.63 1479.63 0.0000 ## 3 1479.63 1480.10 317.6470 This last part is critical as functions make your code more legible. We can clearly read that the code above is calculating the mass error between the theoretical and experimentally observed masses. This might not be as apparent if we put in a complex mathematical formula in the middle of our pipe. 11.2 Conditional arguments Are used to specify a path in a function depending on whether a statement is TRUE or FALSE. These are explored in greater detail via the links in the Further Reading section, but heres a quick example of a function that uses the conditional if statement to print out which number is largest: isGreater &lt;- function(x, y){ if(x &gt; y){ return(paste(x, &quot;is greater than&quot;, y, sep = &quot; &quot;)) } else if (x &lt; y){ return(paste(x, &quot;is less than&quot;, y, sep = &quot; &quot;)) } return(paste(x, &quot;is equal to&quot;, y, sep = &quot; &quot;)) } isGreater (2, 1) ## [1] &quot;2 is greater than 1&quot; isGreater (1, 2) ## [1] &quot;1 is less than 2&quot; isGreater (1, 1) ## [1] &quot;1 is equal to 1&quot; Our simple function compares two numbers, x and y and if x &gt; y evaluate to TRUE it returns the pasted string x is greater than y. If x &lt; y evaluates to FALSE, as in y &gt; x, our function returns the pasted string x is less than y, and finally if neither x &gt; y and x &lt; y evaluate to TRUE, they must be equal! Therefore the final output is x is equal to y. This is an example of an else if statement. If youre simply evaluating two conditions (TRUE or FALSE) you only need the if() conditional, see Further Reading for more details. 11.2.1 Piping conditional statements You can already see the potential for simply conditional statements in the pipe. However, to keep piping operations legible, dplyr offers the case_when function, which works similarly to the else if statements showcased above. Lets see how it works using a real world example. In mass spectrometry undetected compounds are recorded having an intensity of 0; its a common practice to replace 0 with \\(\\frac{limit~of~detection}{2}\\) for subsequent analysis However, we dont want to replace every value with \\(\\frac{LOD}{2}\\), only 0s. Lets use the case_when() function to create a new values with the recorded intensities lod &lt;- 4000 # previously calculated LOD results &lt;- data.frame(&quot;mz&quot; = c(308.97, 380.81, 410.11, 445.34 ), # dummy data &quot;intensities&quot; = c(0, 1000, 5000, 10000)) results %&gt;% mutate(reportedIntensities = case_when(intensities &lt; lod ~ lod/2, TRUE ~ intensities)) ## mz intensities reportedIntensities ## 1 308.97 0 2000 ## 2 380.81 1000 2000 ## 3 410.11 5000 5000 ## 4 445.34 10000 10000 Firstly were creating a new column called reportedIntesities using mutate() and using case_when() to conditionally fill that column. The inputs weve passed to case_when() are two-sided formulas. Essentially if the conditions on the left-hand side of the tilda (~) evaluate to TRUE, case_when will execute the right-hand side. Thee first two-sided formula is intensities &lt; lod ~ lod/2 and checks if the intensities value is less than the previously calculated limit of detection. If intensitis &lt; lod evaluates to TRUE we insert half of the LOD value for that row. If intentisites &lt; lod evaluates to FALSE, we move onto the next two-side formula and reevaluate again. The second two-sided formula TRUE ~ intensities basically means for everything thats remaining (greater than LOD in our instance) just use the value from the intensities column. Some ideas to consider when working with case-when(): Theres no limits to the conditions you can pass to case_when(). However case_when() evaluates in order so put the more specific conditions before the more general. Remember that the point of case_when() and piping is legibility. If youre passing multiple conditions, consider writing a function using else if statements to keep the pipe legible. 11.3 When to use functions A good rule when coding is Dont Repeat yourself!. In practice, this means dont copy and paste blocks of code to multiple parts of your script. Its more difficult to read (more lines), and if you identify an issue with one block, youll need to hunt down all the other blocks to rectify the situation (youll always miss something!). by using functions youll reduce the number of lines of code, but youll also only need to check one spot to rectify the issues. 11.4 Further Reading These chapter has been intentional succinct. Weve omitted several other aspects of programming in R such as for loops, and other iterative programming. To get a better sense of programming in R and to learn more, please see the following links: case_when(): the documentation for the case_when() function and several useful examples. Chapter 19: Functions, Chapter 20: Vectors, and Chapter 21: Iteration of R for Data Science by H. Wickham and G. Grolemund. Hands-on Programming in R by G. Grolemund for a more in-depth (but still approachable) take on programming in R. "],["modelling.html", "Chapter 12 Modelling 12.1 Base R Linear Model 12.2 Cleaning up model ouputs 12.3 Visualizing model 12.4 Further reading", " Chapter 12 Modelling Modelling is basically math used to describe some type of system, and they are a forte of R, a language tailor made for statistical computing Every model has assumptions, limitations, and all around tricky bits to working. Well discuss model fitting and break down popular models youll encounter in specific chapters in Section 3. For now, well introduce the lm() function for generalized linear models. Linear models are the trend lines you used all the way back in CHM135. However, if youve been exposed to these, its most likely via Excels add trend line option. While lm() works much the same mathematically, unlike Excel, R returns allllll of the model outputs. Correspondingly, its easy to get lost between juggling R code, the seemingly endless model outputs, and keeping yourself grounded in the real systems youre attempting to model. So lets take our lm() function at face value and learn how to model in R. Again well touch up the details later on, but for now lets import the FAES calibration results we saw in Transform: dplyr and data manipulation. As weve already seen, our data is composed of four standards and a blank analyzed in triplicate. Since were focusing on modelling, well treat the blank as a standard in our model fitting: # Importing using tips from Import chapter FAES &lt;- read_csv(file = &quot;data/FAESdata.csv&quot;) %&gt;% pivot_longer(cols = -std_Na_conc, names_to = &quot;replicate&quot;, names_prefix = &quot;reading_&quot;, values_to = &quot;signal&quot;) %&gt;% separate(col = std_Na_conc, into = c(&quot;type&quot;, &quot;conc_Na&quot;, &quot;units&quot;), sep = &quot; &quot;, convert = TRUE) %&gt;% mutate(type = &quot;standard&quot;) DT::datatable(FAES) ggplot(data = FAES, aes(x = conc_Na, y = signal)) + geom_point() Note model is a general term, in this situation well be calculating a calibration curve. All calibration curves are models, but not all models are calibration curves. 12.1 Base R Linear Model Rs base lm() function for linear regression is excellent, but its outputs have some messy quirks. Its easier to show that, so lets calculate the linear relationship between the signal as a function of conc_Na: lm_fit &lt;- lm(signal ~ conc_Na, data = FAES) lm_fit ## ## Call: ## lm(formula = signal ~ conc_Na, data = FAES) ## ## Coefficients: ## (Intercept) conc_Na ## 1243 16885 Reading the code above (recall that were reading it from right to left because its base R): Were taking the FAES data we created earlier; data = FAES Were comparing signal (the dependent, y, variable) to conc_Na (the independent, x, variable) via the tilde ~. The way to read this is: Signal depends on concentration. Were comparing these two variables using the lm() function for generalized linear models. All of the model outputs are stored in the lm_fit variable. As we can see, the model outputs are pretty brief and not much more than Excels outputs. We can use summary() to extract more information to better understand our model: summary(lm_fit) ## ## Call: ## lm(formula = signal ~ conc_Na, data = FAES) ## ## Residuals: ## Min 1Q Median 3Q Max ## -203.091 -86.731 -3.761 107.837 176.562 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1242.57 58.05 21.41 1.61e-11 *** ## conc_Na 16884.82 236.98 71.25 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 129.8 on 13 degrees of freedom ## Multiple R-squared: 0.9974, Adjusted R-squared: 0.9972 ## F-statistic: 5077 on 1 and 13 DF, p-value: &lt; 2.2e-16 Now we have a lot more information from our model (dont worry about what everything means, its discussed further in Section 3. For now, understand that its a hot mess. 12.2 Cleaning up model ouputs summary() provides a decent overview of our models performance, but the outputs are difficult to work with. Lets turn to the broom() package to clean up our model outputs. library(broom) calCurve &lt;- FAES %&gt;% group_by(type) %&gt;% nest() %&gt;% mutate(fit = map(data, ~lm(signal ~ conc_Na, data = .x)), tidied = map(fit, tidy), glanced = map(fit, glance) ) calCurve ## # A tibble: 1 x 5 ## # Groups: type [1] ## type data fit tidied glanced ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 standard &lt;tibble [15 x 4]&gt; &lt;lm&gt; &lt;tibble [2 x 5]&gt; &lt;tibble [1 x 12]&gt; Things look a bit more complicated than our earlier example, so lets break down our code line by line: Were taking the FAES dataset that we created earlier. group_by(type) groups all rows by type, in this situation we have only one type: standard. nest() collapses everything other than the type column into smaller dataframes. In this situation, all other information is stored as a tibble under the data column; this is the data used to calculate the linear model. Withing the mutate function, weve created three columns: fit, tidied and glanced. And its the the fit, tidied and glanced that contains out cleaned up model outputs. fit contains the raw output from the linear regression model for signal as a function of conc_Na using the lm() function. The output is in the form of a list, similar to what summary() gave us above. Again, this is exceptionally messy, hence why we used the tidy(), and glance() function from the broom package . map() just means were applying the function tidy() to the individual output list created by lm() and stored in the fit column. Note that the tidy() and glanced() outputs are tibbles. So we now have a tibble containing specific model output values (i.e.Â (Intercept)), lists (i.e.Â fit), and tibbles (tidied). This is known as **nested data*. Were no longer in Kansas anymore Anyways, lets take a look at our model results. The glanced tibble contains a concise one-row summary of the model. This typically contains values such as R^2, adjusted R^2, and residual standard error that are computed once for the entire mode1 Because the data is nested, well need to use unnest() to flatten it back out into regular columns: calCurve %&gt;% unnest(glanced) ## # A tibble: 1 x 16 ## # Groups: type [1] ## type data fit tidied r.squared adj.r.squared sigma statistic p.value ## &lt;chr&gt; &lt;list&gt; &lt;lis&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 stand~ &lt;tibble~ &lt;lm&gt; &lt;tibbl~ 0.997 0.997 130. 5077. 3.05e-18 ## # ... with 7 more variables: df &lt;dbl&gt;, logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, ## # deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt; What you see here is a bit more than what youd get from Excels line-of-best fit output. See the section on Modelling for a better breakdown of what everything means. But for now, we can see that our r.squared of each calibration curve is pretty good, and the p.value indicates each model is significant. the adj.r.squared is the same as r.squared in this situation. This is because r.squared will always increase if we add more exploratory variables to our model; the adj.r.squared accounts for the number of exploratory variables used in the model. However, in our case we only have one exploratory variable, hence theyre the same. But what about the slope and the intercept? After all, thats what we need to calculate the concentration in our unknowns. Lets take a look at tidied from the tidy() function which constructs a tibble that summarizes the models statistical findings. This includes coefficients and p-values for each term in a regression2 # storing because we&#39;ll use it later on. tidied &lt;- calCurve %&gt;% unnest(tidied) tidied ## # A tibble: 2 x 9 ## # Groups: type [1] ## type data fit term estimate std.error statistic p.value glanced ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt; ## 1 stand~ &lt;tibble ~ &lt;lm&gt; (Inte~ 1243. 58.0 21.4 1.61e-11 &lt;tibble ~ ## 2 stand~ &lt;tibble ~ &lt;lm&gt; conc_~ 16885. 237. 71.3 3.05e-18 &lt;tibble ~ Again, a lot more to unpack compared to Excel. Thats because the lm() function in R calculates a generalized linear model. lm() performs a linear regression model, which we normally think of as an equation of the form \\(y= mx+b\\). But, regression models can be expanded to account for multiple variables (hence multiple linear regression) of the form \\[y = \\beta _{0} + \\beta _{1} x_{1} + \\beta _{2} x_{2} ... \\beta _{p} x_{p}\\]] where, \\(y\\) = dependent variable \\(x\\) = exploratory variable; theres no limit how many you can input \\(\\Beta _{0}\\) = y-intercept (constant term) \\(\\Beta _{p}\\) = slope coefficient for each explanatory variable In our situation, we only have one input variable for our model (conc), so the above formula collapses down to \\(y = \\beta _{0} + \\beta _{1} x_{1}\\). So looking at our results above, each row corresponds to a model parameter. For each modelling parameter, were provided an estimate of its numerical value (estimate, the values well use to calculate concentration). The other parameters are useful to understand but not necessary at this point (again, check out the Modelling section). And we can extract these values to use in subsequent calculations: intercept &lt;- as.numeric(tidied[1,5]) slope &lt;- as.numeric(tidied[2,5]) paste(&quot;The equation of our calibration curve is: y = &quot;, slope, &quot;x + &quot;, intercept, sep=&quot;&quot;) ## [1] &quot;The equation of our calibration curve is: y = 16884.8167x + 1242.56646666666&quot; 12.2.1 Why we approach modelling this way You may be wondering why weve seemingly overcomplicated a simple enough procedure. Fair enough, weve showcased an analysis with a simple data set. However, as you progress in your studies youll be quantifying many compounds, often at the same time in the same instrument runs. If you organize your data in a tidy format, you can plot calibration curves for all of your compounds with the same block of code. Essentially you use group_by() to group your data by compound/element. Subsequently, the same code is expandable from 1 compound to as many as you can ever hope to quantify in one shot. So for upper year labs where youre analyzing tens of compounds (cough CHM410 Dust Lab) you can generate calibration curves for all your compounds at once. 12.3 Visualizing model At the top of the chapter we plotted out standards to visualize a linear trend. Visualizations is an essential component when calculating calibration curves, and indeed our standards apepared to follow a linear trend, which was corroborated by the model we calculated above. However, for publications/reports youll need to create a plot with both your standards and model with the displayed equation, so below is a bit of stock code you can use as a starting point to create these plots. Note that it requires the ggpmisc package to display the equation: ggplot(data = FAES, aes(x = conc_Na, y = signal)) + geom_point() + geom_smooth(method = &#39;lm&#39;, se=F) + ggpmisc::stat_poly_eq(formula = y ~ x, # formula uses aesthetic names rr.digits = 4, # reported digits of r-squared aes(label = paste(..eq.label.., ..rr.label.., sep = &quot;~~~&quot;)), parse = TRUE, size = 3) ## `geom_smooth()` using formula &#39;y ~ x&#39; 12.4 Further reading The theory and use of these models are explored in greater details in Section 3. Please read up on it for an understanding of the model outputs and how to use them in your analysis. As well, see the section on modelling in R for Data Science. https://www.newyorker.com/magazine/2021/06/21/when-graphs-are-a-matter-of-life-and-death From the broom package vignette. From the broom package vignette. "],["visualizations.html", "Chapter 13 Visualizations 13.1 Building plots ups 13.2 Basic plotting 13.3 Further reading", " Chapter 13 Visualizations theory undergirding ggplot (focus on geom_point) Geoms aesL x,y, ccolour, shape, size, alpha arranging plots in a grid (grid.arrange) and facets How to plot labels scales annotations themes building a plot layer by layer saving/exporting plots. Visualizations have always been an important part of data science and chemsitry. Good graphics illuminate trends and pattersn you may have otherwise missed and allow us to quickly inspect thousands of values. R via the ggplot2 package is one of, if not the premier, data visualization langauge available. This chapter will formally introduce the ggplot2 package, explain a bit of the logic undergirding its operation, and give you some quick examples of how it works. Section 3 will delve deeper into specific visulizations youll use and encounter in your studies. ggplot2 is loaded by default with the tidyverse suite of pakacges. Lets revisit our spectroscopy data we encountered in Tidying your data: library(tidyverse) atr_long &lt;- read_csv(&quot;data/ATR_plastics.csv&quot;) %&gt;% pivot_longer(cols = -wavenumber, names_to = &quot;sample&quot;, values_to = &quot;absorbance&quot;) ## ## -- Column specification -------------------------------------------------------- ## cols( ## wavenumber = col_double(), ## EPDM = col_double(), ## Polystyrene = col_double(), ## Polyethylene = col_double(), ## `Sample: Shopping bag` = col_double() ## ) # This just outputs a table you can explore within your browser DT::datatable(atr_long) ## Warning in instance$preRenderHook(instance): It seems your data is too big ## for client-side DataTables. You may consider server-side processing: https:// ## rstudio.github.io/DT/server.html 13.1 Building plots ups The gg in ggplot2 stands for the grammar of graphics (Wickham 2010), and its a way to break down graphcis (plots) into small pieces that can be discussed (hence grammar). WEll take a look at this grammar via geoms (what kind of plot), aes (aesthetic choices), etc. For now, understand that this means we need to build up graphics/plots piece-by-piece and layer-by-layer. This extends beyond code to how we code. No sense in putting lipstick on a pig. PLot often, and discard the useless ones. Take the time to pretty up your plot after youre satisfied with the unerlying data. 13.2 Basic plotting ggplot2 uses geoms to specificyt what type of plot to create. Different plots are used to convey different meanings and have different strenghts and weakness. Well explore these more in Section 3, but for now well focus on geom_point(), which simply plots data as poits on an [x,y] coordinate. In otherwords, a scatter plot. Lets plot our tided atr_long data: ggplot(data = atr_long, aes(x = wavenumber, y = absorbance)) + geom_point() Lets ignore the plot for now and look at our code down: ggplot() intilaizes a ggplot object, basically an empty plot. To this weve specified out data set (data = atr_long). We then specified our aesthetic mappings via aes(). Here well pass information for how we want the plot to look. 3.To our aesthetic mappings weve specified which values from atr_long are supposed to be our x-axis values (x = wavenumber) and y-axis values (y = absorbance). We then add the geom_point() layer to create a scatter plot of [x,y] points . Now lets look at our result. What we see is a point for every recorded absorbance measurements from our ATR analysis. We can clearly see the spectra of the different plastics in our data, however theyre all colours the same. This is because weve only speciies the x and y values. As far as ggplot() is concerned, these are the only values that mattter, but we know different. Fortuanely you can pass multiple variables to different aes() options to enahce our plot. For instance, we can pass the sample variable, which specifies which sample a spectrum originates from, to the colour option: ggplot(data = atr_long, aes(x = wavenumber, y = absorbance, colour = sample)) + geom_point() Now we have a legend which clearly specifies which points are assosciated with each sample. But now the points are too large, potentially masking certain peaks. We can adjust the size of each point as follows: ggplot(data = atr_long, aes(x = wavenumber, y = absorbance, colour = sample)) + geom_point(size = 0.5) We specified size = 0.5 in the geom_point() call because its a constant. We can map size to any continuous variable, such as the absorbance: ggplot(data = atr_long, aes(x = wavenumber, y = absorbance, colour = sample, size = absorbance)) + geom_point() Sometimes this makes sense (i.e.Â a bubble chart) but for our example, having the size of the poitns increase as the absorbance increases doesnt provide any new information (it actually clutters our plot). 13.2.1 Changing plot labels By default ggplot uses the header of the columns you passed for the x and y aes() options. Because headers are written for code theyre often poor label titles for plots. We can specify new labels and plot titles as follows: ggplot(data = atr_long, aes(x = wavenumber, y = absorbance, colour = sample)) + geom_point() + labs(title = &quot;ATR Spetra&quot;, subtitle = &quot;Courtesey of CHM317 student data&quot;, x = &quot;Wavenumber, cm^-1&quot;, y = &quot;Absorbance (arbitrary units)&quot;, caption = &quot;hi mom&quot;) 13.3 Further reading Theres no shortage of options when playing around with ggplot and these will be explored in greater detail in Section 3 (including when you should and shouldnt do things). "],["communication.html", "Chapter 14 Communication", " Chapter 14 Communication R markdown slides exporting tips on automating Rmd generation? "],["introduction.html", "Chapter 15 Introduction", " Chapter 15 Introduction Toolbox for data analysis that will envetually cover stuff like: different visualizations used in CHM410/env chem w/ links to more useful websites statistics, but mostly just those needed for undergrad envb. chem. better elaboration on linear regression modelling with descriptions with all of the fit parameters. non-linear regression interactive plots (probably in the visualizations chapter above) how to lie w/ statistics and plots. Chapter explaining graphicacy and numeracy. "],["choosing-visualizations.html", "Chapter 16 Choosing Visualizations", " Chapter 16 Choosing Visualizations introduce the principle plots/visualizations used in CHM410/undergad envb chem scatter/jitter line box/violin plot histogram and density distributions marginal plots working code of example plots "],["linear-regression-redux.html", "Chapter 17 Linear Regression Redux", " Chapter 17 Linear Regression Redux Note this needs to be cut up and reformated to elaborate more on the theory behind linear regression. - DH In this chapter well discuss the why and what of the linear regression model we calculated in the Modelling. Understanding models is more important than creating models. # same code as Modelling Chapter FAES &lt;- read_csv(file = &quot;data/FAESdata.csv&quot;) %&gt;% pivot_longer(cols = -std_Na_conc, names_to = &quot;replicate&quot;, names_prefix = &quot;reading_&quot;, values_to = &quot;signal&quot;) %&gt;% separate(col = std_Na_conc, into = c(&quot;type&quot;, &quot;conc_Na&quot;, &quot;units&quot;), sep = &quot; &quot;, convert = TRUE) %&gt;% mutate(type = &quot;standard&quot;) ggplot(data = FAES, aes(x = conc_Na, y = signal)) + geom_point() + geom_smooth(method = &#39;lm&#39;, se=F) + ggpmisc::stat_poly_eq(formula = y ~ x, # formula uses aesthetic names rr.digits = 4, # reported digits of r-squared aes(label = paste(..eq.label.., ..rr.label.., sep = &quot;~~~&quot;)), parse = TRUE, size = 3) "],["non-linear-logistic-regression-modelling.html", "Chapter 18 Non-linear Logistic Regression Modelling 18.1 Visually inspecting our data 18.2 Extracting maximal values 18.3 Modelling Sigmoidal Curve", " Chapter 18 Non-linear Logistic Regression Modelling Note this is from the proof-of-concept book and will be shortened/narrowed down to talk about non-l;inear regression in general while using a logistic regreassion as an example. Will be reworked shortly, just posting so people get an idea. - DH For this tutorial well be using data obtained from an experiment in CHM317. In this experiment, students measure the fluorescence of the fluorescent dye acridine orange in the presence of sodium dodecyl sulfate (SDS). In, or near, the critical micellular region of SDS, there is a sharp change in absorbance and fluorescence of the solution. Tracking these changes in fluorescence, students are to estimate the CMC of SDS. The setting of the fluorometer for this experiment are: Instrumental Settings Instrument Name LS50-B Excitation Wavelength 480 nm Emission Wavelength Range 500 to 650.5 nm Excitation Slit Width 2.5 nm Emission Slit Width 3 nm Scan Speed 250 nm/min Lets go ahead and import our data: library(tidyverse) sdsWide &lt;- read_csv(&quot;data/CHM317/fluoro_SDSCMC.csv&quot;) head(sdsWide) ## # A tibble: 6 x 10 ## `Wavelength (nm)` `0.001 M SDS` `0.0016 M SDS` `0.004 M SDS` `0.0048 M SDS` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 500 20.0 18.6 7.02 1.12 ## 2 500. 27.3 13.9 5.45 5.46 ## 3 501 27.0 12.5 8.13 5.89 ## 4 502. 29.7 12.5 8.17 5.81 ## 5 502 32.6 15.7 4.58 6.69 ## 6 502. 32.8 19.4 5.94 5.33 ## # ... with 5 more variables: 0.0056 M SDS &lt;dbl&gt;, 0.0064 M SDS &lt;dbl&gt;, ## # 0.0072 M SDS &lt;dbl&gt;, 0.008 M SDS &lt;dbl&gt;, 0.012 M SDS &lt;dbl&gt; Looking at our data headers we can see the familiar wide format, with a wavelength column corresponding to the emission wavelength and the remainder accounting for the emission intensity at various concentration of SDS. Note that the intensity columns contains two pieces of information: 1) the concentration in moles per liter and 2) the identity of the chemical, SDS in this case. So when we tidy our data well need to split these column headers up so we get a column corresponding to the numerical value of the concentration, and another with the identity of the column. sds &lt;- sdsWide %&gt;% pivot_longer(cols = !`Wavelength (nm)`, # select all columns BESIDES `Wavelength (nm)` names_to = c(&quot;conc&quot;, &quot;conc.units&quot;, &quot;chemical&quot;), names_pattern = &quot;(.*) (.) (.*)&quot;, values_to = &quot;intensity&quot;, names_transform = list(conc = as.numeric) ) %&gt;% rename(wavelength = &#39;Wavelength (nm)&#39;) # renaming column, less typing later on. head(sds) ## # A tibble: 6 x 5 ## wavelength conc conc.units chemical intensity ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 500 0.001 M SDS 20.0 ## 2 500 0.0016 M SDS 18.6 ## 3 500 0.004 M SDS 7.02 ## 4 500 0.0048 M SDS 1.12 ## 5 500 0.0056 M SDS 5.48 ## 6 500 0.0064 M SDS 7.72 The key bit of code here is names_to and names_pattern. The first part creates three new columns, and the second part searches and subsequently breaks up those headers. Recall our original headers looked like this: 0.001 M SDS, where we had the concentration, a space (which is a character!), the concentration units, another space, and finally the chemical. What names_pattern = \"(.*) (.) (.*).is searching for three chunks of characters separated by a space. We specify the chunk of characters in the parentheses. So the first bit, (.*), means look for any character (. in this context is a placeholder for any character) and the chunk of characters can be any length (as denoted by *). So extending this, we see our code looks for three chunks of characters, delimited by a space between them. The first can be any length, the second is 1 character long, and the third can be any length. You could have specified to look for M or SDS explicitly, but if we had different chemicals or units in our dataset these would be lost. Lastly note names_transform. We split up our original headers to populate rows. However our original headers were stored as characters, and when w split them up we created three separate strings of characters, so R will treat out conc values as characters rather than numbers. By using names_transform we tell R to treat conc values as numbers. Oh and we renamed our original Wavelength (nm) column to wavelength using the rename function. Its always a good idea to use the simplest column names you can (and no simpler!). A good practice is to remove any spaces (you can use snake_case or camelCase instead) as well as removing special character such as parentheses. 18.1 Visually inspecting our data Lets make a quick plot of our fluorescence intensity data and see what we have. ggplot(data = sds, aes(x = wavelength, y = intensity, colour = conc)) + geom_point() Alright, alright, alright. Things are looking like wed expect with some well behaved data. By plotting each point individually, we can really see the noise inherent with each reading. For a more robust analysis wed typically conduct several replicates and average out the spectra for each concentration or apply some kind of model to smooth each peak. But today, were just interested in getting the maximal fluorescence emission intensity from each reading. Lets first annotate our plate to find the highest point, then go about extracting our data for analysis. 18.1.1 Annotating maximal values Annotating the maximal point on the plot will take a bit more code then actually obtaining it from the data. For this well need to use the ggpmisc package which contains miscellaneous extensions for ggplot2, and ggrepel so our labels wont overlap. library(ggpmisc) library(ggrepel) ggplot(data = sds, aes(x = wavelength, y = intensity, colour = conc)) + geom_point() + ggpmisc::stat_peaks(span = NULL, geom = &quot;text_repel&quot;, # From ggrepel mapping = aes(label = paste(..y.label.., ..x.label..)), x.label.fmt = &quot;at %.0f nm&quot;, y.label.fmt = &quot;Max intensity = %.0f&quot;, segment.colour = &quot;black&quot;, arrow = grid::arrow(length = unit(0.1, &quot;inches&quot;)), nudge_x = 60, nudge_y = 200) + facet_grid(rows = vars(conc)) By facetting the plot (i.e.Â arranging many smaller plots vs.Â one large one), we can easily see the increase in emission peak intensity as the concentration of SDS increases. Likewise, we can avoid the messy overlap of the max intensity annotations. This is only one way to plot this data, but this is sufficient because were simply inspecting our data at this point. And here we can see that the intensity all occur around a similar wavelength (~ 528 nm) 18.2 Extracting maximal values The plots we made above are great for inspecting our data, but what we really want is the maximal emission intensity value to calculate the CMC of SDS. We can see the maximal values on the plots, but theres no way were typing those in manually. So lets go ahead and get out maximal values from our dataset: sdsMax &lt;- sds %&gt;% group_by(chemical, conc.units, conc) %&gt;% filter(intensity == max(intensity)) %&gt;% ungroup() head(sdsMax) ## # A tibble: 6 x 5 ## wavelength conc conc.units chemical intensity ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 520 0.0056 M SDS 28.1 ## 2 524 0.0072 M SDS 116. ## 3 527 0.0064 M SDS 65.3 ## 4 527 0.008 M SDS 768. ## 5 528. 0.012 M SDS 810. ## 6 528 0.0048 M SDS 22.0 All we did was tell R to take the row with the highest emission intensity value per group. We specified chemical, conc.units, and conc, in case we had more chemicals in our dataset. Are maximum values match those we see in our plot above. Lets see how they stack up againt each other: ggplot(data = sdsMax, aes(x = conc, y = intensity)) + geom_point() Figure 18.1: Plot of maximal fluoresence intensity at various concentrations of SDS. 18.3 Modelling Sigmoidal Curve So we want to find the critical micellular concentration of SDS using the maximum fluorescence emission. The CMC is at the midpoint of the sigmoidal curve. Which means well need to a) plot a sigmoidal curve and b) extract the midpoint. The sigmoidal or S-shaped curve mentioned in the lab manual is known as a logistic regression. Logistic regressions are often used to model systems with a largely binary outcome. In other words, the system starts at point A, and remains there for awhile, before quickly jumping up (or down) to level B and remain there for the remainder. Examples include saturation and dose response curves. For our CMC working data, the fluorescence intensity is low when the \\([SDS] &lt; CMC\\), as micelles are not able to form. However once \\([SDS] &gt; CMC\\), micelles form and the fluorescence intensity increases. We can see this trend in 18.1. There are different forms of logistic regression equations. The simplest form is the 1 parameter, or sigmoid, function which looks like \\(f(x) = \\frac{1}{1+e^{-x}}\\). The outputs for this function are between 0 and 1. We could apply this formula to our model if we somehow normalized our fluoresence intensity accordingly. An alternative is to use the four parameter logistic regression, which looks like: \\[f(x) = \\frac{a - d}{\\left[ 1 + \\left( \\frac{x}{c} \\right)^b \\right ]} + d\\] where: a = the theoretical response when \\(x = 0\\) b = the slope factor c = the mid-range concentration (inflection point) This is commonly referred to as the EC50 or LC50 in toxicology/pharmacology. d = the theoretical response when \\(x = \\infty\\) Why do we need such a complicated formula for our model? Well, looking again at 18.1 we see that the lower point is approximately 20, and not zero. Likewise, the upper limit appears to be around 825. The slope factor is necessary because the transition from the low to high steady state occurs over a small, but not immeasurable, concentration range. And lastly, by including the inflection point, we can calculate exactly for this value using R to get the CMC estimate. 18.3.1 Calculating Logistic Regression A strength of R is its flexibility in running various models, and logistic regression is no different. We can use a number of packages to reach these ends, specifically the drc package contains a plethora of functions for modelling dose response curves (hence drc). However, for this example well use a more generalized approach. Earlier we talked about linear regression, where we plot adjust the slope and intercept of a linear equation to best fit our data (see Calibration Curves). Recall that this optimization is based on minimizing the distance between the model and all of the experimental points (least squares). Well the stats package has a function called nls that expands upon the this to nonlinear models. Per the nls function description: [nls] determine[s] the nonlinear (weighted) least_squared estimates of the parameters of a nonlinear model. So we can create a formula in R based on the four-parameter logistic regression described above. After that, well need to produce some starting details from which the model can build off of. If we dont tell nls where to start, it cant function, as the search space is too large. Looking at @ref{fig:sdsMaxPlot}, the intensity appears to floor around 20; the intensity appears to max out around 820; the midpoint appears to be around 0.0075 M, and lets say the slope is 1. Remember, these are starting values from which nls starts to optimize from, and not the actual values used to construct the model. So, lets create our model logisModel &lt;- nls(intensity ~ (a-d)/(1 + (conc /c)^b) + d, data = sdsMax, start = list(a = 20, # min intensity b = 1, # slope c = 0.0075, # CMC d= 820) # max intensity ) ## Error in numericDeriv(form[[3L]], names(ind), env, central = nDcentral): Missing value or an infinity produced when evaluating the model  and we get an error message. Get used to these when modelling! Dont worry about understanding it completely, error messages are often written with programmers in mind so they can be a bit cryptic. You can often copy and paste these directly into any search engine to get some more information, but this one is simple enough: we either have a missing value or an infinity produced. Well we have six input parameters in our model: a, b, c, d, our independent variable conc, and our dependant variable intensity. Weve also supplied starting values to all of them via the list we created inside the function. Therefore, one of our starting values must be too far off from a plausible start point and is causing troubles in the nls function. They all look good except for the slope start value b = 1. The slope here is an approximation for the slope between the min value a and max value d. Looking at our data in @ref{fig:sdsMaxPlot}, that slope may be a bit shallow consider the large jump in intensity. Lets increase the value of b and try again: logisModel &lt;- nls(intensity ~ (a-d)/(1 + (conc /c)^b) + d, data = sdsMax, start = list(a = 20, # min intensity b = 10, # new slope c = 0.0075, # CMC d= 820) # max intensity ) Ey, no errors! Once you progress beyond simple linear regressions, modelling becomes more of a craft. If we were trying to apply this model to multiple datasets, we would probably want to shop around cran to find a package with self-starting models. This way we can circument having to supply starting parameters. Anyways, thats for another day. For now, lets take a look at our model outputs which are all stored in the logisModel variable. To this end, well use the broom package which cleans up the default model outputs in R. Specifically, well use tidy to get an output of our estimated model parameters (i.e.Â a,b,c, and d), and augment for a data frame of containing the input values, and the estimated intensity values. Lets look at our fitted values: library(broom) augment &lt;- augment(logisModel) augment ## # A tibble: 9 x 4 ## intensity conc .fitted .resid ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 28.1 0.0056 49.4 -21.3 ## 2 116. 0.0072 116. -0.123 ## 3 65.3 0.0064 49.7 15.6 ## 4 768. 0.008 768. 0.0977 ## 5 810. 0.012 810. -0.0861 ## 6 22.0 0.0048 49.4 -27.5 ## 7 93.0 0.001 49.4 43.5 ## 8 31.7 0.004 49.4 -17.7 ## 9 57.0 0.0016 49.4 7.51 What we can see here from augment are the intensity and conc values we inputted into R. .fitted are the intenisty values for a given concentration fitted to out model, and .resid is the residuals, the difference between the actual and estimated values. Lets go ahead and plot our actual and fitted values against each other. ggplot(augment, aes(x = conc, y = intensity, colour = &quot;actual&quot;)) + geom_point() + geom_line(aes(y = .fitted)) + geom_point(aes(y = .fitted, colour = &quot;fitted&quot;)) Looks pretty good, although its interesting how the baseline at lower concentrations doesnt plateau like the model values. Youll note that the line produced by geom_line will only draw a straight line between points. Theres ways to address this, but we dont need to for our needs right now. Looking again at our model results, there doesnt appear to be any gross outliers, so our model seems to have done a good job. We can verify this by checking the residuals: ggplot(augment, aes(x = conc, y = .resid)) + geom_point() We cant see any obvious patterns in the residuals (i.e.Â all are negative), so we can have further confidence in the fit of out model. 18.3.2 Extracting model parameters To extrac the model parameters a, b, c, and d we can use the tidy function: library(broom) tidy &lt;- tidy(logisModel) tidy ## # A tibble: 4 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 49.4 11.1 4.44 0.00678 ## 2 b 49.0 9.65 5.07 0.00385 ## 3 c 0.00755 0.0000785 96.2 0.00000000230 ## 4 d 810. 27.3 29.7 0.000000808 Looking past the scientific notation, our model values are pretty similar to what we estimated. Specifically, c, our midpoint value is 0.0076 M. Not too bad from our original estimate. And recall that the midpoint of our curve corresponds to the critical micellular concentration of SDS, which weve estimated to be 0.0076M. Not too far from the literature value of 0.0081 M. "]]
