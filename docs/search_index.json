[["index.html", "Tentative Title goes here Preface", " Tentative Title goes here David Hall &amp; Folks whose names will go here 2021-03-26 Preface Howdy, This is a a proof-of-concept for how a textbook can be written in R markdown, and published to the web. All of the web stuff is done automatically so we only need to focus on the content. Id added some quick sections from documents Ive written for previous courses to illustrate some of the possibilities. "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction This test "],["software.html", "Chapter 2 Software 2.1 Microsoft Excel 2.2 R", " Chapter 2 Software 2.1 Microsoft Excel The demonstrations and instructions in this document are based on Microsoft Excel for Microsoft 365. Current U of T students with a UTmail+ account (i.e. you) can access the full desktop and mobile versions. For assistance downloading the software, consult the UofT libraries webpage. Microsoft Excel is available for both Windows and Mac operating systems. If you are using an different OS (i.e. Linux), you can still use Excel, and other Microsoft Office web programs, from the web. More details can be found here. Note youll still need to login using your UtorID. 2.2 R R is a computer language used for data analysis and visualization. It is extremely popular in academia, and is one of the most popular language for data sciences. While it might seem overkill to learn R to tackle your undergraduate work, it is well worth the time investment especially as your progress to more complicated projects. To know R is to constantly find uses for it. R is most easily written in the R Studio IDE. If you have not done so, download R from the comprehensive R archive network (CRAN), link here: http://cran.utstat.utoronto.ca/, and R Studio, link here: https://rstudio.com/products/rstudio/download/). Follow the listed instructions and you should be well on your way. You can also see the accompanying Working with RStudio document on Quercus for additional top tips. 2.2.1 R Markdown In a nutshell, R Markdown allows you to analyse your data with R and write your report in the same place (this document is written with R Markdown). This has loads of benefits including increased reproducibility, and streamlined thinking. No more flipping back and forth between coding and writing to figure out whats going on. Lets run some simple code as an example: # Look at me go mom x &lt;- 2+2 x ## [1] 4 What weve done here is write a snippet of R code, ran it, and printed the results (as they would appear in the console). While the above code isnt anything special, we can extend this concept so that our R markdown document contains any data, figures or plots we generate throughout our analysis in R. Pretty neat, eh? You might not think so, but lets imagine a scenario youll encounter soon enough. Youre about to submit your assignment, youve spent hours analyzing your data and beautifying your plots. Everything is good to go until you notice at the last minute you were supposed to subtract value x and not value y in your analysis. If you did all your work in Excel (tsk tsk), youll need to find the correct worksheet, apply the changes, reformat your plots, and import them into word (assuming everything is going well, which is never does with looming deadlines). Now if you did all your work in R markdown, you go to your one .rmd document, briefly apply the changes and re-compile your document. To further illustate the verstility of R Markdown, this entire book was writting with it! See Appen "],["importing.html", "Chapter 3 Importing 3.1 Importing data into Excel 3.2 Notes on comma-separated values (CSV) files 3.3 Notes on filenames", " Chapter 3 Importing Before you can start analyzing data and answer questions you need to import your data into Excel. Furthermore, data can be saved in many formats, each with their own advantages, quirks, and limitations. 3.1 Importing data into Excel Thankfully importing data into Excel is (usually) very easy and if youve ever used it before, you probably havent given it much though. Simply find whatever file containing your data and open it with Excel; consult the Import or export text (.txt or .csv) files instructions from Microsoft for further instructions. For Experiment 1, open Microsoft Excel and then open your dataset by clicking FILE  OPEN  BROWSE and select your file. You should see something resembling Figure 2. You may be prompted with a dialog warning you of data loss when saving as CSV. Excel is simply warning you that certain features (changes in font, plots, formulas) cannot be saved in the CSV file format. Consequently, your first step is to save your data as an excel workbook (.xlsx) to avoid this issue. Instructions for saving can be found here. Initial layout of Excel and imported data. 3.2 Notes on comma-separated values (CSV) files The CSV file extension stands for comma-separate values file, a popular file format for storing data, and the one used for the Experiment 1 datasets. You are bound to encounter CSV files again in your academic careers. As the name implies, CSV files contain data separated by commas (go ahead and open your file in Notepad/TextEdit or Microsoft Word to see this). The takeaway with .csv files is they are good for storing data, and only data. If your work in Excel relies upon complex formatting (such as colour coding) save your work in the .xlsx format. These elements will not be saved in the .csv format. 3.3 Notes on filenames Filenames contain two parts: the actual name and an extension specifying the file type (i.e. ImportantData.csv). Knowing the later is incredibly helpful, especially if youre working with multiple file types. However, filename extensions are often hidden by default. To display the full filename, follow these instructions for Windows ( or Mac OSX). "],["exploring-spectroscopy-data.html", "Chapter 4 Exploring Spectroscopy Data 4.1 Setting up data for efficient plotting 4.2 Plotting data 4.3 Creating interactive plots", " Chapter 4 Exploring Spectroscopy Data Youre bound to encounter some form of spectroscopy data during your chemistry career. Most of the instruments youll use to acquire spectroscopy data will also have software that allows you to explore and analyze your recorded spectra. However, this software is often proprietary, and as a student its extremely difficult to get your hands on a working copy, let alone a working copy for each instrument youll use. Fortunately, you can easily export your spectra as a .csv file containing all the data youll need to reproduce your spectra at home. This chapter outlines how you can use R to create easily create interactive plots, and how you can use these to plot your spectra data in an interactive format. 4.1 Setting up data for efficient plotting Alright, lets import an example ATR FT-IR dataset. Different programs will typically have their own export layout, but you can tidy this up in Excel during the lab. The example here is from an experiment in CHM 317 where students use ATR FT-IR to investigate the polymer compositions of consumer products against known plastics. library(tidyverse) spectrum &lt;- read_csv(&quot;./data/CHM317/ATR_plastics.csv&quot;) head(spectrum, n = 10) ## # A tibble: 10 x 11 ## wavenumber EPDM Neoprene Mylar PTFE PVC Polystyrene Polyethylene ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 550. 0.212 0.296 0.0709 0.0417 0.0174 0.0746 0.000873 ## 2 551. 0.212 0.295 0.0709 0.0421 0.0174 0.0746 0.000834 ## 3 551. 0.213 0.295 0.0708 0.0424 0.0175 0.0745 0.000819 ## 4 552. 0.213 0.294 0.0707 0.0429 0.0175 0.0745 0.000825 ## 5 552. 0.214 0.294 0.0707 0.0436 0.0176 0.0745 0.000868 ## 6 553. 0.214 0.294 0.0706 0.0443 0.0177 0.0746 0.000949 ## 7 553. 0.215 0.293 0.0706 0.0453 0.0177 0.0746 0.00101 ## 8 553. 0.215 0.292 0.0705 0.0455 0.0178 0.0746 0.00103 ## 9 554. 0.216 0.292 0.0704 0.0453 0.0179 0.0746 0.00105 ## 10 554. 0.216 0.291 0.0703 0.0443 0.0179 0.0745 0.00107 ## # ... with 3 more variables: `Sample: eyeglass bag` &lt;dbl&gt;, `Sample: Gloves ## # (KC500)` &lt;dbl&gt;, `Sample: Shopping bag` &lt;dbl&gt; Notice how the data is organized here. Theres a column for wavelength, and then a column for the absorance readings for each plastic sample. Note that since the experiment uses the same method for each sample, the wavenumber steps are identical between runs, hence the lone wavenumber column. While this setup, in the wide format, is handy when recording data and organizing your spreadsheet, its not very efficient in R. So were going to transform it into a long format. spectrum &lt;- spectrum %&gt;% pivot_longer(cols = !&#39;wavenumber&#39;, names_to = &quot;sample&quot;, values_to = &quot;absorbance&quot;) head(spectrum, n = 10) ## # A tibble: 10 x 3 ## wavenumber sample absorbance ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 550. EPDM 0.212 ## 2 550. Neoprene 0.296 ## 3 550. Mylar 0.0709 ## 4 550. PTFE 0.0417 ## 5 550. PVC 0.0174 ## 6 550. Polystyrene 0.0746 ## 7 550. Polyethylene 0.000873 ## 8 550. Sample: eyeglass bag 0.0201 ## 9 550. Sample: Gloves (KC500) 0.0451 ## 10 550. Sample: Shopping bag 0.0238 In a long format, each column is a variable, and each row is an observation. So in this format you can read across and note that at 550.0952 cm^-1, EPDM had an asorbance of 0.212. This format makes working with the tidyverse family of functions. 4.2 Plotting data Because our data is tidied (i.e. setup properly) we can easily plot everything all at once: fig &lt;- ggplot(spectrum, aes(x = wavenumber, y = absorbance, colour = sample)) + geom_point() fig So here we see that each sample/plastic has its own spectra coloured, and we can easily compare them all to each other. However this plot is a bit ugly. Ugly plots have their place, most notably when youre just exploring your data and seeing what sticks to the wall. Now to present your plot in a lab report youll need to clean it up a bit. Lets give that a go: fig &lt;- ggplot(spectrum, aes(x = wavenumber, y = absorbance, colour = sample)) + geom_path() + labs(title = &quot;ATR FT-IR spectra of various plastics&quot;, subtitle = &quot;Spectra recorded with a Thermo Scientific iS50&quot;, caption = &quot;(data from CHM 317 classe of 2019.)&quot;) + xlab(&quot; Wavenumber(cm^-1)&quot;) + ylab(&quot;Absorbance&quot;) + theme_classic() fig Note the use of geom_path() in our new plot. This will connect the individual points in a plot creating a smooth line. 4.3 Creating interactive plots Alright, so far what we showed isnt any different then what you could do in Excel or similar programs. An advantage of R is you can use packages such as plotly to easily create interactive graphs. Using interactive graphs when analyzing spectroscopy data is very powerful as it affords you the tools to easily zoom in and investigate small peaks, craw along the spectra and see the evolution of your samples absorbances, and to readily compare samples to each other. All that being said, lets load the plotly package and transform our above plot into an interactive plot. library(plotly) plotlyFig &lt;- ggplotly(fig) plotlyFig 4.3.1 Some notes about working with Plotly You dont have to worry too much about whats going on under the hood with Plotly, but you should be aware of the following: Interactive plotly plots can only work in an .html format. Obviously if you print them out as a PDF youll loose the interactive element. If you notice something neat when you zoom in, you can use the snapshot button to take a picture for your report. "],["appendix.html", "Chapter 5 Appendix 5.1 First off, what is R Markdown? 5.2 How do I get started with R markdown? 5.3 So now what do I do with R Markdown?", " Chapter 5 Appendix 5.1 First off, what is R Markdown? In a nutshell, R Markdown allows you to analyse your data with R and write your report in the same place (this document is written with R Markdown). This has loads of benefits including increased reproducibility, and streamlined thinking. No more flipping back and forth between coding and writing to figure out whats going on. Lets run some simple code as an example: # Look at me go mom x &lt;- 2+2 x ## [1] 4 What weve done here is write a snippet of R code, ran it, and printed the results (as they would appear in the console). While the above code isnt anything special, we can extend this concept so that our R markdown document contains any data, figures or plots we generate throughout our analysis in R. For example: library(tidyverse) library(knitr) airPol &lt;- read_csv(&quot;./data/Toronto_60433_2018_Jan2to8.csv&quot;, na = &quot;-999&quot;) kable(airPol[1:5, ], caption = &quot;Example table of airborne pollutant levels used for Figure 1.&quot;) Table 5.1: Example table of airborne pollutant levels used for Figure 1. temperature pollutant concentration date -11.7 NO2 41 2018-01-01 19:00:00 -11.7 O3 2 2018-01-01 19:00:00 -11.3 NO2 28 2018-01-01 20:00:00 -11.3 O3 14 2018-01-01 20:00:00 -11.6 NO2 20 2018-01-01 20:59:59 ggplot(airPol, aes(date, concentration, colour = pollutant)) + geom_line() + theme_classic() Figure 5.1: Time series of 2018 ambient atmospheric O3 and NO2 concentrations (ppb) in downtown Toronto Pretty neat, eh? You might not think so, but lets imagine a scenario youll encounter soon enough. Youre about to submit your assignment, youve spent hours analyzing your data and beautifying your plots. Everything is good to go until you notice at the last minute you were supposed to subtract value x and not value y in your analysis. If you did all your work in Excel (tsk tsk), youll need to find the correct worksheet, apply the changes, reformat your plots, and import them into word (assuming everything is going well, which is never does with looming deadlines). Now if you did all your work in R markdown, you go to your one .rmd document, briefly apply the changes and re-compile your document. 5.2 How do I get started with R markdown? As youve already guessed, R markdown documents use R and are most easily written and assembled in the R Studio IDE. If you have not done so, download R from the comprehensive R archive network (CRAN), link here: http://cran.utstat.utoronto.ca/, and R Studio, link here: https://rstudio.com/products/rstudio/download/). Follow the listed instructions and you should be well on your way. You can also see the accompanying Working with RStudio document on Quercus for additional top tips. Once setup with R and R Studio, well need to install the rmarkdown and tinytex packages. In the console, simply run the following code: install.packages(&quot;rmarkdown&quot;) # downloaded from CRAN install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # install TinyTeX The rmarkdown package is what well use to generate our documents, and the tinytex package enables compiling documents as PDFs. Theres a lot more going on behind the scenes, but you shouldnt need to worry about it. Now that everything is setup, you can create your first R Markdown document by opening up R Studio, selecting FILE -&gt; NEW FILE -&gt; Rmarkdown. A dialog box will appear asking for some basic input parameters for your R markdown document. Add your title and select PDF as your default output format (you can always change these later if you want). A new file should appear thats already populated with some basic script illustrating the key components of an R markdown document. 5.2.1 Great, now whats going on with this R markdown document? Your first reaction when you opened your newly created R markdown document is probably that it doesnt look anything at all like something youd show your TA. Youre right, what youre seeing is the plain text code which needs to be compiled (called knit in R Studio) to create the final document. Lets break down what the R markdown syntax means then lets knit our document. When you create a R markdown document like this in R Studio a bunch of example code is already written. You can compile this document (see below) to see what it looks like, but lets break down the primary components. At the top of the document youll see something that looks like this: --- title: &quot;Untitled&quot; author: &quot;David Hall&quot; date: &quot;24/08/2020&quot; output: pdf_document --- This section is known as the preamble and its where you specify most of the document parameters. In the example we can see that the document title is Untitled, its written by yours truly, on the 24th of August, and the default output is a PDF document. You can modify the preamble to suit your needs. For example, if you wanted to change the title you would write title: \"Your Title Here\" in the preamble. Note that none of this is R code, rather its YAML, the syntax for the documents metadata. Apart from whats shown you shouldnt need to worry about this much, just remember that indentation in YAML matters. Reading further down the default R markdown code, youll see different blocks of text. In R markdown anything you write will be interpreted as body text (i.e .the stuff you want folks reading like this) in the knitted document. To actually run R code youll need to see the next section. 5.2.2 How to run R code in R Markdown Theres two ways to write R code in markdown: Setup a code chunk. Code chunks start with three back-ticks like this: ```{r}, where r indicates youre using the R languauge. You end a code chunk using three more backticks like this ```. Specify code chunks options in the curly braces. i.e. ```{r, fig.height = 2} sets figure height to 2 inches. See the Code Chunk Options section below for more details. Inline code expression, which starts with `r and ends with ` in the body text. Earlier we calculated x &lt;- 2 + 2, we can use inline expressions to recall that value (ex. We found that x is 4) A screenshot of how this document, the one youre reading, appeared in R Studio is shown in Figure 2. To actually run your R code you have two options. The first is to run the individual chunks using the Run current chunk button (See figure 2). This is a great way to tinker with your code before you compile your document. The second option is to compile your entire document using the Knit document button (see Figure 2). Knitting will sequentially run all of your code chunks, generate all the text, knit the two together and output a PDF. Youll basically save this for the end. Note all the code chunks in a single markdown document work together like a normal R script. That is if you assign a value to a variable in the first chunk, you can call this variable in the second chunk; the same applies for libraries. Also note that every time you compile a markdown document, its done in a fresh R session. If youre calling a variable that exist in your working environment, but isnt explicitly created in the markdown document youll get an error. How this document, the one youre reading, appeared in RStudio; to see the final results scroll up to Figure 1. Note the knit and run current chunk buttons. 5.2.3 How do I go from R markdown to something I can hand-in To create a PDF to hand in youll need to compile, or knit, your entire markdown document as mentioned above. To knit (or compile) your R markdown script, simply click the knit button in R Studio (yellow box, Figure 2). You can specify what output you would like and R Studio will (hopefully) compile your script. If you want to test how your code chunks will run, R Studio shows a little green play button on the top right of every code chunk. this is the run current chunk button, and clicking it will run your code chunk and output whatever it would in the final R markdown document. This is a great way to tweak figures and codes as it avoids the need to compile the entire document to check if you managed to change the lines from black to blue in your plot. 5.3 So now what do I do with R Markdown? You do science and you write it down! In all seriousness though, this document was only meant to introduce you to R markdown, and to make the case that you should use it for your ENV 316 coursework. A couple of the most useful elements are talked about below, and there is a wealth of helpful resources for formatting your documents. Just remember to keep it simple, theres no need to reinvent the wheel. The default R markdown outputs are plenty fine with us. 5.3.1 R Markdown resources and further reading Theres a plethora of helpful online resources to help hone your R markdown skills. Well list a couple below (the titles are links to the corresponding document): Chapter 2 of the R Markdown: The Definitive Guide by Xie, Allair &amp; Grolemund (2020). This is the simplest, most comprehensive, guide to learning R markdown and its available freely online. The R markdown cheat sheet, a great resource with the most common R markdown operations; keep on hand for quick referencing. Bookdown: Authoring Books and Technical Documents with R Markdown (2020) by Yihui Xie. Explains the bookdown package which greatly expands the capabilities of R markdown. For example, the table of contents of this document is created with bookdown. 5.3.2 R code chunk options You can specify a number of options for an individual R code chunk. You include these at the top of the code chunk. For example the following code tells markdown youre running code written in R, that when you compile your document this code chunk should be evaluated, and that the resulting figure should have the caption Some Caption. A list of code chunk options is shown below: ```{r, eval = FALSE, fig.cap = &quot;Some caption&quot;} # some code to generate a plot worth captioning. ``` option default effect eval TRUE whether to evaluate the code and include the results echo TRUE whether to display the code along with its results warning TRUE whether to display warnings error FALSE whether to display errors message TRUE whether to display messages tidy FALSE whether to reformat code in a tidy way when displaying it fig.width 7 width in inches for plots created in chunk fig.height 7 height in inches for plots created in chunk fig.cap NA include figure caption, must be in quotation makrs (\"\") 5.3.3 Inserting images into markdown documents Images not produced by R code can easily be inserted into your document. The markdown code isnt R code, so between paragraphs of bodytext insert the following code. Note that compiling to PDF, the LaTeX call will place your image in the optimal location, so you might find your image isnt exactly where you though it would be. A quick google search can help you out if this is problem. ![Caption for the picture.](path/to/image.png){width=50%, height=50%} Note that in the above the use of image atributes, the {width=50%, height=50%} at the end. This is how youll adjust the size of your image. Other dimensions you can use include px, cm, mm, in, inch, and %. 5.3.4 Generating Tables Theres multiple methods to create tables in R markdown. Assuming you want to display results calculated through R code, you can use the kable() function. Please consult Chapter 10 of the R Markdown Cookbook for additional support. Alternatively, if you want to create simple tables manually use the following code in the main body, outside of an R code chunk. You can increase the number of rows/columns and the location of the horizontal lines. To generate more complex tables, see the kable() function and the kableExtra package. Header 1 | Header 2| Header 3 ---------|---------|---------| Row 1 | Data | Some other Data Row 2 | Data | Some other Data ---------|---------|---------| Header 1 Header 2 Header 3 Row 1 Data Some other Data Row 2 Data Some other Data 5.3.5 Spellcheck in R Markdown While writing an R markdown document in R studio, go to the Edit tab at the top of the window and select Check Spelling. You can also use the F7 key as a shortcut. The spell checker will literally go through every word it thinks youve misspelled in your document. You can add words to it so your spell checkers utility grows as you use it. Note that the spell check with also check your R code; be wary of changing words in your code chunks because you may get an error down the line. 5.3.6 Quick reference on R markdown syntax Inline formatting; which is used to format your text. Numbered lists Normal lists Lists Block-level elements, i.e. youre section headers Example R markdown syntax used for formatting shown above: - **Inline formatting**; *which* is ~used~ to ^format^ `your text`. 1. Numbered lists - Normal lists - Lists - **Block-level elements**, i.e. your section headers # Headers ## Headers ### Headers "]]
